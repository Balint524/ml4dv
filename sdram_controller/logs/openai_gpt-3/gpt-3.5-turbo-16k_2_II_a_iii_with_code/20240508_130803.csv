Model,openai/gpt-3.5-turbo-16k,SYSTEM,"Please provide a list of lists, in the format: [[int, int, int], [int, int, int], ...]In each sublist of three integers:The first integer should be between 0 and 1.The second integer should be between 0 and 1.The third integer should be between 0 and 1.Example: [[0, 1, 0], [1, 0, 0]]Do NOT provide any text - comments, extra remarks, context - only provide a list",temperature,0.4,top_p,1,Prompter,TemplatePromptGeneratorSDRAM,Extractor,UniversalExtractor
Total Message#,Dialog #,Message #,Total Token Cnt,USER,Input Token Cnt,ASSISTANT,Output Token Cnt,Action,Coverage Rate,Coverage Plan
1,1,1,5005,"""You will receive code of a DUT and a testbench for it, as well as a description of bins (i.e. test cases). 
----------
I have a device under test (DUT). Here's the SystemVerilog code of the DUT:
------
DUT CODE
/**
 * simple controller for ISSI IS42S16160G-7 SDRAM found in De0 Nano
 *  16Mbit x 16 data bit bus (32 megabytes)
 *  Default options
 *    133Mhz
 *    CAS 3
 *
 *  Very simple host interface
 *     * No burst support
 *     * haddr - address for reading and wriging 16 bits of data
 *     * data_input - data for writing, latched in when wr_enable is highz0
 *     * data_output - data for reading, comes available sometime
 *       *few clocks* after rd_enable and address is presented on bus
 *     * rst_n - start init ram process
 *     * rd_enable - read enable, on clk posedge haddr will be latched in,
 *       after *few clocks* data will be available on the data_output port
 *     * wr_enable - write enable, on clk posedge haddr and data_input will
 *       be latched in, after *few clocks* data will be written to sdram
 *
 * Theory
 *  This simple host interface has a busy signal to tell you when you are
 *  not able to issue commands.
 */

module sdram_controller (
    /* HOST INTERFACE */
    wr_addr,
    wr_data,
    wr_enable,

    rd_addr,
    rd_data,
    rd_ready,
    rd_enable,

    busy, rst_n, clk,

    /* SDRAM SIDE */
    addr, bank_addr, data, clock_enable, cs_n, ras_n, cas_n, we_n,
    data_mask_low, data_mask_high
);

/* Internal Parameters */
parameter ROW_WIDTH = 13;
parameter COL_WIDTH = 9;
parameter BANK_WIDTH = 2;

parameter SDRADDR_WIDTH = ROW_WIDTH > COL_WIDTH ? ROW_WIDTH : COL_WIDTH;
parameter HADDR_WIDTH = BANK_WIDTH + ROW_WIDTH + COL_WIDTH;

parameter CLK_FREQUENCY = 133;  // Mhz
parameter REFRESH_TIME =  32;   // ms     (how often we need to refresh)
parameter REFRESH_COUNT = 8192; // cycles (how many refreshes required per refresh time)

// clk / refresh =  clk / sec
//                , sec / refbatch
//                , ref / refbatch
localparam CYCLES_BETWEEN_REFRESH = ( CLK_FREQUENCY
                                      * 1_000
                                      * REFRESH_TIME
                                    ) / REFRESH_COUNT;

// STATES - State
localparam IDLE      = 5'b00000;

localparam INIT_NOP1 = 5'b01000,
           INIT_PRE1 = 5'b01001,
           INIT_NOP1_1=5'b00101,
           INIT_REF1 = 5'b01010,
           INIT_NOP2 = 5'b01011,
           INIT_REF2 = 5'b01100,
           INIT_NOP3 = 5'b01101,
           INIT_LOAD = 5'b01110,
           INIT_NOP4 = 5'b01111;

localparam REF_PRE  =  5'b00001,
           REF_NOP1 =  5'b00010,
           REF_REF  =  5'b00011,
           REF_NOP2 =  5'b00100;

localparam READ_ACT  = 5'b10000,
           READ_NOP1 = 5'b10001,
           READ_CAS  = 5'b10010,
           READ_NOP2 = 5'b10011,
           READ_READ = 5'b10100;

localparam WRIT_ACT  = 5'b11000,
           WRIT_NOP1 = 5'b11001,
           WRIT_CAS  = 5'b11010,
           WRIT_NOP2 = 5'b11011;

// Commands              CCRCWBBA
//                       ESSSE100
localparam CMD_PALL = 8'b10010001,
           CMD_REF  = 8'b10001000,
           CMD_NOP  = 8'b10111000,
           CMD_MRS  = 8'b1000000x,
           CMD_BACT = 8'b10011xxx,
           CMD_READ = 8'b10101xx1,
           CMD_WRIT = 8'b10100xx1;

/* Interface Definition */
/* HOST INTERFACE */
input  [HADDR_WIDTH-1:0]   wr_addr;
input  [15:0]              wr_data;
input                      wr_enable;

input  [HADDR_WIDTH-1:0]   rd_addr;
output [15:0]              rd_data;
input                      rd_enable;
output                     rd_ready;

output                     busy;
input                      rst_n;
input                      clk;

/* SDRAM SIDE */
output [SDRADDR_WIDTH-1:0] addr;
output [BANK_WIDTH-1:0]    bank_addr;
inout  [15:0]              data;
output                     clock_enable;
output                     cs_n;
output                     ras_n;
output                     cas_n;
output                     we_n;
output                     data_mask_low;
output                     data_mask_high;

/* I/O Registers */

reg  [HADDR_WIDTH-1:0]   haddr_r;
reg  [15:0]              wr_data_r;
reg  [15:0]              rd_data_r;
reg                      busy;
reg                      data_mask_low_r;
reg                      data_mask_high_r;
reg [SDRADDR_WIDTH-1:0]  addr_r;
reg [BANK_WIDTH-1:0]     bank_addr_r;
reg                      rd_ready_r;

wire [15:0]              data_output;
wire                     data_mask_low, data_mask_high;

assign data_mask_high = data_mask_high_r;
assign data_mask_low  = data_mask_low_r;
assign rd_data        = rd_data_r;

/* Internal Wiring */
reg [3:0] state_cnt;
reg [9:0] refresh_cnt;

reg [7:0] command;
reg [4:0] state;

// TODO output addr[6:4] when programming mode register

reg [7:0] command_nxt;
reg [3:0] state_cnt_nxt;
reg [4:0] next;

assign {clock_enable, cs_n, ras_n, cas_n, we_n} = command[7:3];
// state[4] will be set if mode is read/write
assign bank_addr      = (state[4]) ? bank_addr_r : command[2:1];
assign addr           = (state[4] | state == INIT_LOAD) ? addr_r : { {SDRADDR_WIDTH-11{1'b0}}, command[0], 10'd0 };

assign data = (state == WRIT_CAS) ? wr_data_r : 16'bz;
assign rd_ready = rd_ready_r;

// HOST INTERFACE
// all registered on posedge
always @ (posedge clk)
  if (~rst_n)
    begin
    state <= INIT_NOP1;
    command <= CMD_NOP;
    state_cnt <= 4'hf;

    haddr_r <= {HADDR_WIDTH{1'b0}};
    wr_data_r <= 16'b0;
    rd_data_r <= 16'b0;
    busy <= 1'b0;
    end
  else
    begin

    state <= next;
    command <= command_nxt;

    if (!state_cnt)
      state_cnt <= state_cnt_nxt;
    else
      state_cnt <= state_cnt - 1'b1;

    if (wr_enable)
      wr_data_r <= wr_data;

    if (state == READ_READ)
      begin
      rd_data_r <= data;
      rd_ready_r <= 1'b1;
      end
    else
      rd_ready_r <= 1'b0;

    busy <= state[4];

    if (rd_enable)
      haddr_r <= rd_addr;
    else if (wr_enable)
      haddr_r <= wr_addr;

    end

// Handle refresh counter
always @ (posedge clk)
 if (~rst_n)
   refresh_cnt <= 10'b0;
 else
   if (state == REF_NOP2)
     refresh_cnt <= 10'b0;
   else
     refresh_cnt <= refresh_cnt + 1'b1;


/* Handle logic for sending addresses to SDRAM based on current state*/
always @*
begin
    if (state[4])
      {data_mask_low_r, data_mask_high_r} = 2'b00;
    else
      {data_mask_low_r, data_mask_high_r} = 2'b11;

   bank_addr_r = 2'b00;
   addr_r = {SDRADDR_WIDTH{1'b0}};

   if (state == READ_ACT | state == WRIT_ACT)
     begin
     bank_addr_r = haddr_r[HADDR_WIDTH-1:HADDR_WIDTH-(BANK_WIDTH)];
     addr_r = haddr_r[HADDR_WIDTH-(BANK_WIDTH+1):HADDR_WIDTH-(BANK_WIDTH+ROW_WIDTH)];
     end
   else if (state == READ_CAS | state == WRIT_CAS)
     begin
     // Send Column Address
     // Set bank to bank to precharge
     bank_addr_r = haddr_r[HADDR_WIDTH-1:HADDR_WIDTH-(BANK_WIDTH)];

     // Examples for math
     //               BANK  ROW    COL
     // HADDR_WIDTH   2 +   13 +   9   = 24
     // SDRADDR_WIDTH 13

     // Set CAS address to:
     //   0s,
     //   1 (A10 is always for auto precharge),
     //   0s,
     //   column address
     addr_r = {
               {SDRADDR_WIDTH-(11){1'b0}},
               1'b1,                       /* A10 */
               {10-COL_WIDTH{1'b0}},
               haddr_r[COL_WIDTH-1:0]
              };
     end
   else if (state == INIT_LOAD)
     begin
     // Program mode register during load cycle
     //                                       B  C  SB
     //                                       R  A  EUR
     //                                       S  S-3Q ST
     //                                       T  654L210
     addr_r = {{SDRADDR_WIDTH-10{1'b0}}, 10'b1000110000};
     end
end

// Next state logic
always @*
begin
   state_cnt_nxt = 4'd0;
   command_nxt = CMD_NOP;
   if (state == IDLE)
        // Monitor for refresh or hold
        if (refresh_cnt >= CYCLES_BETWEEN_REFRESH)
          begin
          next = REF_PRE;
          command_nxt = CMD_PALL;
          end
        else if (rd_enable)
          begin
          next = READ_ACT;
          command_nxt = CMD_BACT;
          end
        else if (wr_enable)
          begin
          next = WRIT_ACT;
          command_nxt = CMD_BACT;
          end
        else
          begin
          // HOLD
          next = IDLE;
          end
    else
      if (!state_cnt)
        case (state)
          // INIT ENGINE
          INIT_NOP1:
            begin
            next = INIT_PRE1;
            command_nxt = CMD_PALL;
            end
          INIT_PRE1:
            begin
            next = INIT_NOP1_1;
            end
          INIT_NOP1_1:
            begin
            next = INIT_REF1;
            command_nxt = CMD_REF;
            end
          INIT_REF1:
            begin
            next = INIT_NOP2;
            state_cnt_nxt = 4'd7;
            end
          INIT_NOP2:
            begin
            next = INIT_REF2;
            command_nxt = CMD_REF;
            end
          INIT_REF2:
            begin
            next = INIT_NOP3;
            state_cnt_nxt = 4'd7;
            end
          INIT_NOP3:
            begin
            next = INIT_LOAD;
            command_nxt = CMD_MRS;
            end
          INIT_LOAD:
            begin
            next = INIT_NOP4;
            state_cnt_nxt = 4'd1;
            end
          // INIT_NOP4: default - IDLE

          // REFRESH
          REF_PRE:
            begin
            next = REF_NOP1;
            end
          REF_NOP1:
            begin
            next = REF_REF;
            command_nxt = CMD_REF;
            end
          REF_REF:
            begin
            next = REF_NOP2;
            state_cnt_nxt = 4'd7;
            end
          // REF_NOP2: default - IDLE

          // WRITE
          WRIT_ACT:
            begin
            next = WRIT_NOP1;
            state_cnt_nxt = 4'd1;
            end
          WRIT_NOP1:
            begin
            next = WRIT_CAS;
            command_nxt = CMD_WRIT;
            end
          WRIT_CAS:
            begin
            next = WRIT_NOP2;
            state_cnt_nxt = 4'd1;
            end
          // WRIT_NOP2: default - IDLE

          // READ
          READ_ACT:
            begin
            next = READ_NOP1;
            state_cnt_nxt = 4'd1;
            end
          READ_NOP1:
            begin
            next = READ_CAS;
            command_nxt = CMD_READ;
            end
          READ_CAS:
            begin
            next = READ_NOP2;
            state_cnt_nxt = 4'd1;
            end
          READ_NOP2:
            begin
            next = READ_READ;
            end
          // READ_READ: default - IDLE

          default:
            begin
            next = IDLE;
            end
          endcase
      else
        begin
        // Counter Not Reached - HOLD
        next = state;
        command_nxt = command;
        end
end
`ifdef FORMAL
    logic [3:0] cycle_count;
    
    initial begin 
        assume(~rst_n)
        cycle_count <= 0;
    end

    always @(posedge clk) begin
        if (cycle_count < 10)
            cycle_count <= cycle_count + 1;
    end

    assume property ( @(posedge clk) cycle_count < 5 |-> ~rst_n );
    assume property ( @(posedge clk) cycle_count > 4 |-> rst_n );

    always @(posedge clk) begin
        if(rst_n) begin
          precharge: cover (~cs_n & ~ras_n & cas_n & ~we_n);
          auto_refresh: cover (~cs_n & ~ras_n & ~cas_n & we_n);
          command_inhibit: cover (~cs_n & ras_n & cas_n & we_n);
          load_mode_register: cover (~cs_n & ~ras_n & ~cas_n & ~we_n);
          activate: cover (~cs_n & ~ras_n & cas_n & we_n);
          read: cover (~cs_n & ras_n & ~cas_n & we_n);
          write: cover (~cs_n & ras_n & ~cas_n & ~we_n);
        end
    end
`endif
endmodule

------
I also have a testbench for the DUT. Here's the Python code of the testbench:
------
TESTBENCH CODE
# scale_factor_queue_pop should be high?

import sys
import os

import random
import math

import functools
import zmq
import pickle
from contextlib import closing

import cocotb
from cocotb.clock import Clock
from cocotb.triggers import Timer, ClockCycles, ReadWrite, ReadOnly, Event, RisingEdge

directory = os.path.dirname(os.path.abspath(""__file__""))
sys.path.insert(0, os.path.dirname(directory))

from shared_helpers.cocotb_helpers import *
from sdram_controller.shared_types import *

class CoverageMonitor:

    def __init__(self):
        self.coverage_database = CoverageDatabase()
        self.coverage_database.misc_bins= {
            ""precharge"": 0,
            ""auto_refresh"": 0,
            ""command_inhibit"": 0,
            ""load_mode_register"":0,
            ""activate"": 0,
            ""read"": 0,
            ""write"": 0
        }

        self.coverage_sampled_event = Event()

# Produces the stimulus for the testbench based on observed coverage
class SimulationController:
    def __init__(self, dut, coverage_monitor, zmq_addr):
        self.dut = dut
        self.coverage_monitor = coverage_monitor
        self.end_simulation_event = Event()
        self.zmq_context = zmq.Context()
        self.zmq_addr = zmq_addr

    # Handles driving a new_value when one is provided by `determine_next_value`
    async def controller_loop(self):
        await cocotb.start(async_check_hits(self))
        with self.zmq_context.socket(zmq.REP) as socket:
            socket.bind(self.zmq_addr)

            while True:
                stimulus_msg = socket.recv()
                stimulus_obj = pickle.loads(stimulus_msg)
                print(stimulus_obj)

                dut_state = self.sample_dut_state()
                wr_enable = stimulus_obj.value[0]
                rd_enable = stimulus_obj.value[1]
                reset = stimulus_obj.value[2]

                while (self.dut.state_cnt.value != 0):
                    await ClockCycles(self.dut.clk, 1)

                if(reset):
                    reset_cycles = 3
                    self.dut.rst_n.value = 0
                    print(""RESET"")
                else:
                    reset_cycles = -1
                    self.dut.rst_n.value = 1

                self.dut.wr_enable.value = wr_enable
                self.dut.rd_enable.value = rd_enable

                print(self.dut.state.value)
                await ClockCycles(self.dut.clk, 1)
                while(self.dut.busy.value or reset_cycles > 0):
                    await ClockCycles(self.dut.clk, 1)
                    reset_cycles -= 1
                self.dut.rst_n.value = 1

                socket.send_pyobj((dut_state, self.coverage_monitor.coverage_database))

                if stimulus_obj.finish:
                    self.end_simulation_event.set()
                    break
    
    def check_hits(self):
        cs = self.dut.cs_n.value
        ras = self.dut.ras_n.value
        cas = self.dut.cas_n.value
        we = self.dut.we_n.value

        if(not cs and not ras and cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""precharge""] += 1
        if(not cs and not ras and not cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""auto_refresh""] += 1
        if(not cs and ras and cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""command_inhibit""] += 1
        if(not cs and not ras and not cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""load_mode_register""] += 1
        if(not cs and not ras and cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""activate""] += 1
        if(not cs and ras and not cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""read""] += 1
        if(not cs and ras and not cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""write""] += 1


    def sample_dut_state(self):
        return DUTState(
        )
    
    def close(self):
        self.zmq_context.term()

    def run_controller(self):
        cocotb.start_soon(self.controller_loop())

async def async_check_hits(simulation_controller):
    while(not simulation_controller.end_simulation_event.is_set()):
        await RisingEdge(simulation_controller.dut.clk)
        simulation_controller.check_hits()

@cocotb.test()
async def basic_test(dut):
    from global_shared_types import GlobalCoverageDatabase

    server_port = ""5050""
    # server_port = input(""Please enter server's port (e.g. 5050, 5555): "")

    trial_cnt = 0

    while True:
        trial_cnt += 1

        coverage_monitor = CoverageMonitor()
        cocotb.start_soon(Clock(dut.clk, 100, units=""ns"").start())

        await do_reset(dut.rst_n, dut.clk, 3)

        with closing(
            SimulationController(dut, coverage_monitor, f""tcp://*:{server_port}"")
        ) as simulation_controller:
            simulation_controller.run_controller()

            # Wait for end of simulation to be signalled. Give the design a few more
            # clocks to run before outputting final coverage values
            await simulation_controller.end_simulation_event.wait()
            await Timer(5, units=""ns"")

            print(f""***** FINAL COVERAGE of trial #{trial_cnt} *****"")
            print(
                GlobalCoverageDatabase(
                    coverage_monitor.coverage_database
                ).get_coverage_rate()
            )
        break
------
Now, we want to test the DUT with a list of commands as its input. We want the input to cover the bins (i.e. test cases) that we care about. Here's the description of the bins that we care about:
------
BINS DESCRIPTION
- You provide a list of lists, in the format: [[int, int, int], [int, int, int], ...]
- The DUT is an SDRAM controller (without burst support)
- The two integers in each list correspond to two input signal to the SDRAM controller:
    - First integer: write enable.
    - Second integer: read enable.
    - Third integer: reset. It is not advised to reset the design regularly.
- At least one clock cycle will pass between writing the inner lists on the inputs.
- Other inputs, such as address and data are not important, you will not provide these.
- The coverage bins are the possible commands the SDRAM controller can generate for the SDRAM. You need to cover each of the following bins with your commands:
---
    - precharge: deactivate (close) the current row of all banks
    - auto_refresh: refresh one row of each bank, using an internal counter. All banks must be precharged.
    - command_inhibit: command inhibit (no operation)
    - load_mode_register: configure the DRAM chip
    - activate: open a row for read and write commands
    - read: read data from the currently active row
    - write: write data to the currently active row
---
------

----------
Following the bins description, and refer to the programs, generate a list of integer pairs which covers the described bins as much as you can.
""",4951,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [0, 1, 1], [1, 1, 0]]""",54,none,3,"{'precharge': 4, 'auto_refresh': 1, 'command_inhibit': 75}"
2,1,2,5193,"""The values you provided failed to cover all the bins.
You will see the result coverage of your previous response(s), and then generate another list of integer pairs to cover the unreached bins (i.e. test cases)
Here are some of the unreached bins:
------
UNREACHED BINS
configure the DRAM chip.
open a row for read and write commands.
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5121,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [0, 1, 1], [1, 1, 0], [1, 1, 1], [0, 0, 0]]""",72,none,3,"{'precharge': 8, 'auto_refresh': 2, 'command_inhibit': 154}"
3,1,3,5417,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
configure the DRAM chip.
open a row for read and write commands.
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5327,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [0, 1, 1], [1, 1, 0], [1, 1, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0]]""",90,none,3,"{'precharge': 13, 'auto_refresh': 3, 'command_inhibit': 253}"
4,1,4,5686,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
configure the DRAM chip.
open a row for read and write commands.
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5551,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [0, 1, 1], [1, 1, 0], [1, 1, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [0, 0, 1], [1, 1, 0], [0, 1, 0], [0, 0, 0]]""",135,none,3,"{'precharge': 20, 'auto_refresh': 5, 'command_inhibit': 392}"
5,1,5,6081,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
configure the DRAM chip.
open a row for read and write commands.
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5820,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [0, 1, 1], [1, 1, 0], [1, 1, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [0, 0, 1], [1, 1, 0], [0, 1, 0], [0, 0, 0], [1, 0, 0], [0, 0, 1], [1, 1, 0], [0, 1, 0], [1, 0, 1], [1, 1, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [0, 0, 1], [1, 1, 0], [0, 1, 0], [0, 0, 0]]""",261,none,3,"{'precharge': 33, 'auto_refresh': 10, 'command_inhibit': 664}"
6,1,6,6000,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
configure the DRAM chip.
open a row for read and write commands.
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5820,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [0, 1, 1], [1, 1, 0], [1, 1, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [0, 0, 1], [1, 1, 0], [0, 1, 0], [0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 0], [1, 0, 0], [0, 1, 0]]""",180,none,4,"{'precharge': 40, 'auto_refresh': 13, 'command_inhibit': 827, 'load_mode_register': 1}"
7,1,7,6603,"""The values you provided failed to cover all the bins.
You will see the result coverage of your previous response(s), and then generate another list of integer pairs to cover the unreached bins (i.e. test cases)
Here are some of the unreached bins:
------
UNREACHED BINS
open a row for read and write commands.
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",6003,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [0, 1, 1], [1, 1, 0], [1, 1, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [0, 0, 1], [1, 1, 0], [0, 1, 0], [0, 0, 0], [1, 0, 0], [0, 0, 1], [1, 1, 0], [0, 1, 0], [1, 0, 1], [1, 1, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [0, 0, 1], [1, 1, 0], [0, 1, 0], [0, 0, 0], [1, 0, 0], [0, 0, 1], [1, 1, 0], [0, 1, 0], [1, 0, 1], [1, 1, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [0, 0, 1], [1, 1, 0], [0, 1, 0], [0, 0, 0], [1, 0, 0], [0, 0, 1], [1, 1, 0], [0, 1, 0], [1, 0, 1], [1, 1, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [0, 0, 1], [1, 1, 0], [0, 1, 0], [0, 0, 0], [1, 0, 0], [0, 0, 1], [1, 1, 0], [0, 1, 0], [1, 0, 1], [1, 1, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0], [1, 0,""",600,reset,5,"{'precharge': 69, 'auto_refresh': 25, 'command_inhibit': 1432, 'load_mode_register': 1, 'activate': 1}"
8,2,1,5023,"""You will receive code of a DUT and a testbench for it, as well as a description of bins (i.e. test cases). 
----------
I have a device under test (DUT). Here's the SystemVerilog code of the DUT:
------
DUT CODE
/**
 * simple controller for ISSI IS42S16160G-7 SDRAM found in De0 Nano
 *  16Mbit x 16 data bit bus (32 megabytes)
 *  Default options
 *    133Mhz
 *    CAS 3
 *
 *  Very simple host interface
 *     * No burst support
 *     * haddr - address for reading and wriging 16 bits of data
 *     * data_input - data for writing, latched in when wr_enable is highz0
 *     * data_output - data for reading, comes available sometime
 *       *few clocks* after rd_enable and address is presented on bus
 *     * rst_n - start init ram process
 *     * rd_enable - read enable, on clk posedge haddr will be latched in,
 *       after *few clocks* data will be available on the data_output port
 *     * wr_enable - write enable, on clk posedge haddr and data_input will
 *       be latched in, after *few clocks* data will be written to sdram
 *
 * Theory
 *  This simple host interface has a busy signal to tell you when you are
 *  not able to issue commands.
 */

module sdram_controller (
    /* HOST INTERFACE */
    wr_addr,
    wr_data,
    wr_enable,

    rd_addr,
    rd_data,
    rd_ready,
    rd_enable,

    busy, rst_n, clk,

    /* SDRAM SIDE */
    addr, bank_addr, data, clock_enable, cs_n, ras_n, cas_n, we_n,
    data_mask_low, data_mask_high
);

/* Internal Parameters */
parameter ROW_WIDTH = 13;
parameter COL_WIDTH = 9;
parameter BANK_WIDTH = 2;

parameter SDRADDR_WIDTH = ROW_WIDTH > COL_WIDTH ? ROW_WIDTH : COL_WIDTH;
parameter HADDR_WIDTH = BANK_WIDTH + ROW_WIDTH + COL_WIDTH;

parameter CLK_FREQUENCY = 133;  // Mhz
parameter REFRESH_TIME =  32;   // ms     (how often we need to refresh)
parameter REFRESH_COUNT = 8192; // cycles (how many refreshes required per refresh time)

// clk / refresh =  clk / sec
//                , sec / refbatch
//                , ref / refbatch
localparam CYCLES_BETWEEN_REFRESH = ( CLK_FREQUENCY
                                      * 1_000
                                      * REFRESH_TIME
                                    ) / REFRESH_COUNT;

// STATES - State
localparam IDLE      = 5'b00000;

localparam INIT_NOP1 = 5'b01000,
           INIT_PRE1 = 5'b01001,
           INIT_NOP1_1=5'b00101,
           INIT_REF1 = 5'b01010,
           INIT_NOP2 = 5'b01011,
           INIT_REF2 = 5'b01100,
           INIT_NOP3 = 5'b01101,
           INIT_LOAD = 5'b01110,
           INIT_NOP4 = 5'b01111;

localparam REF_PRE  =  5'b00001,
           REF_NOP1 =  5'b00010,
           REF_REF  =  5'b00011,
           REF_NOP2 =  5'b00100;

localparam READ_ACT  = 5'b10000,
           READ_NOP1 = 5'b10001,
           READ_CAS  = 5'b10010,
           READ_NOP2 = 5'b10011,
           READ_READ = 5'b10100;

localparam WRIT_ACT  = 5'b11000,
           WRIT_NOP1 = 5'b11001,
           WRIT_CAS  = 5'b11010,
           WRIT_NOP2 = 5'b11011;

// Commands              CCRCWBBA
//                       ESSSE100
localparam CMD_PALL = 8'b10010001,
           CMD_REF  = 8'b10001000,
           CMD_NOP  = 8'b10111000,
           CMD_MRS  = 8'b1000000x,
           CMD_BACT = 8'b10011xxx,
           CMD_READ = 8'b10101xx1,
           CMD_WRIT = 8'b10100xx1;

/* Interface Definition */
/* HOST INTERFACE */
input  [HADDR_WIDTH-1:0]   wr_addr;
input  [15:0]              wr_data;
input                      wr_enable;

input  [HADDR_WIDTH-1:0]   rd_addr;
output [15:0]              rd_data;
input                      rd_enable;
output                     rd_ready;

output                     busy;
input                      rst_n;
input                      clk;

/* SDRAM SIDE */
output [SDRADDR_WIDTH-1:0] addr;
output [BANK_WIDTH-1:0]    bank_addr;
inout  [15:0]              data;
output                     clock_enable;
output                     cs_n;
output                     ras_n;
output                     cas_n;
output                     we_n;
output                     data_mask_low;
output                     data_mask_high;

/* I/O Registers */

reg  [HADDR_WIDTH-1:0]   haddr_r;
reg  [15:0]              wr_data_r;
reg  [15:0]              rd_data_r;
reg                      busy;
reg                      data_mask_low_r;
reg                      data_mask_high_r;
reg [SDRADDR_WIDTH-1:0]  addr_r;
reg [BANK_WIDTH-1:0]     bank_addr_r;
reg                      rd_ready_r;

wire [15:0]              data_output;
wire                     data_mask_low, data_mask_high;

assign data_mask_high = data_mask_high_r;
assign data_mask_low  = data_mask_low_r;
assign rd_data        = rd_data_r;

/* Internal Wiring */
reg [3:0] state_cnt;
reg [9:0] refresh_cnt;

reg [7:0] command;
reg [4:0] state;

// TODO output addr[6:4] when programming mode register

reg [7:0] command_nxt;
reg [3:0] state_cnt_nxt;
reg [4:0] next;

assign {clock_enable, cs_n, ras_n, cas_n, we_n} = command[7:3];
// state[4] will be set if mode is read/write
assign bank_addr      = (state[4]) ? bank_addr_r : command[2:1];
assign addr           = (state[4] | state == INIT_LOAD) ? addr_r : { {SDRADDR_WIDTH-11{1'b0}}, command[0], 10'd0 };

assign data = (state == WRIT_CAS) ? wr_data_r : 16'bz;
assign rd_ready = rd_ready_r;

// HOST INTERFACE
// all registered on posedge
always @ (posedge clk)
  if (~rst_n)
    begin
    state <= INIT_NOP1;
    command <= CMD_NOP;
    state_cnt <= 4'hf;

    haddr_r <= {HADDR_WIDTH{1'b0}};
    wr_data_r <= 16'b0;
    rd_data_r <= 16'b0;
    busy <= 1'b0;
    end
  else
    begin

    state <= next;
    command <= command_nxt;

    if (!state_cnt)
      state_cnt <= state_cnt_nxt;
    else
      state_cnt <= state_cnt - 1'b1;

    if (wr_enable)
      wr_data_r <= wr_data;

    if (state == READ_READ)
      begin
      rd_data_r <= data;
      rd_ready_r <= 1'b1;
      end
    else
      rd_ready_r <= 1'b0;

    busy <= state[4];

    if (rd_enable)
      haddr_r <= rd_addr;
    else if (wr_enable)
      haddr_r <= wr_addr;

    end

// Handle refresh counter
always @ (posedge clk)
 if (~rst_n)
   refresh_cnt <= 10'b0;
 else
   if (state == REF_NOP2)
     refresh_cnt <= 10'b0;
   else
     refresh_cnt <= refresh_cnt + 1'b1;


/* Handle logic for sending addresses to SDRAM based on current state*/
always @*
begin
    if (state[4])
      {data_mask_low_r, data_mask_high_r} = 2'b00;
    else
      {data_mask_low_r, data_mask_high_r} = 2'b11;

   bank_addr_r = 2'b00;
   addr_r = {SDRADDR_WIDTH{1'b0}};

   if (state == READ_ACT | state == WRIT_ACT)
     begin
     bank_addr_r = haddr_r[HADDR_WIDTH-1:HADDR_WIDTH-(BANK_WIDTH)];
     addr_r = haddr_r[HADDR_WIDTH-(BANK_WIDTH+1):HADDR_WIDTH-(BANK_WIDTH+ROW_WIDTH)];
     end
   else if (state == READ_CAS | state == WRIT_CAS)
     begin
     // Send Column Address
     // Set bank to bank to precharge
     bank_addr_r = haddr_r[HADDR_WIDTH-1:HADDR_WIDTH-(BANK_WIDTH)];

     // Examples for math
     //               BANK  ROW    COL
     // HADDR_WIDTH   2 +   13 +   9   = 24
     // SDRADDR_WIDTH 13

     // Set CAS address to:
     //   0s,
     //   1 (A10 is always for auto precharge),
     //   0s,
     //   column address
     addr_r = {
               {SDRADDR_WIDTH-(11){1'b0}},
               1'b1,                       /* A10 */
               {10-COL_WIDTH{1'b0}},
               haddr_r[COL_WIDTH-1:0]
              };
     end
   else if (state == INIT_LOAD)
     begin
     // Program mode register during load cycle
     //                                       B  C  SB
     //                                       R  A  EUR
     //                                       S  S-3Q ST
     //                                       T  654L210
     addr_r = {{SDRADDR_WIDTH-10{1'b0}}, 10'b1000110000};
     end
end

// Next state logic
always @*
begin
   state_cnt_nxt = 4'd0;
   command_nxt = CMD_NOP;
   if (state == IDLE)
        // Monitor for refresh or hold
        if (refresh_cnt >= CYCLES_BETWEEN_REFRESH)
          begin
          next = REF_PRE;
          command_nxt = CMD_PALL;
          end
        else if (rd_enable)
          begin
          next = READ_ACT;
          command_nxt = CMD_BACT;
          end
        else if (wr_enable)
          begin
          next = WRIT_ACT;
          command_nxt = CMD_BACT;
          end
        else
          begin
          // HOLD
          next = IDLE;
          end
    else
      if (!state_cnt)
        case (state)
          // INIT ENGINE
          INIT_NOP1:
            begin
            next = INIT_PRE1;
            command_nxt = CMD_PALL;
            end
          INIT_PRE1:
            begin
            next = INIT_NOP1_1;
            end
          INIT_NOP1_1:
            begin
            next = INIT_REF1;
            command_nxt = CMD_REF;
            end
          INIT_REF1:
            begin
            next = INIT_NOP2;
            state_cnt_nxt = 4'd7;
            end
          INIT_NOP2:
            begin
            next = INIT_REF2;
            command_nxt = CMD_REF;
            end
          INIT_REF2:
            begin
            next = INIT_NOP3;
            state_cnt_nxt = 4'd7;
            end
          INIT_NOP3:
            begin
            next = INIT_LOAD;
            command_nxt = CMD_MRS;
            end
          INIT_LOAD:
            begin
            next = INIT_NOP4;
            state_cnt_nxt = 4'd1;
            end
          // INIT_NOP4: default - IDLE

          // REFRESH
          REF_PRE:
            begin
            next = REF_NOP1;
            end
          REF_NOP1:
            begin
            next = REF_REF;
            command_nxt = CMD_REF;
            end
          REF_REF:
            begin
            next = REF_NOP2;
            state_cnt_nxt = 4'd7;
            end
          // REF_NOP2: default - IDLE

          // WRITE
          WRIT_ACT:
            begin
            next = WRIT_NOP1;
            state_cnt_nxt = 4'd1;
            end
          WRIT_NOP1:
            begin
            next = WRIT_CAS;
            command_nxt = CMD_WRIT;
            end
          WRIT_CAS:
            begin
            next = WRIT_NOP2;
            state_cnt_nxt = 4'd1;
            end
          // WRIT_NOP2: default - IDLE

          // READ
          READ_ACT:
            begin
            next = READ_NOP1;
            state_cnt_nxt = 4'd1;
            end
          READ_NOP1:
            begin
            next = READ_CAS;
            command_nxt = CMD_READ;
            end
          READ_CAS:
            begin
            next = READ_NOP2;
            state_cnt_nxt = 4'd1;
            end
          READ_NOP2:
            begin
            next = READ_READ;
            end
          // READ_READ: default - IDLE

          default:
            begin
            next = IDLE;
            end
          endcase
      else
        begin
        // Counter Not Reached - HOLD
        next = state;
        command_nxt = command;
        end
end
`ifdef FORMAL
    logic [3:0] cycle_count;
    
    initial begin 
        assume(~rst_n)
        cycle_count <= 0;
    end

    always @(posedge clk) begin
        if (cycle_count < 10)
            cycle_count <= cycle_count + 1;
    end

    assume property ( @(posedge clk) cycle_count < 5 |-> ~rst_n );
    assume property ( @(posedge clk) cycle_count > 4 |-> rst_n );

    always @(posedge clk) begin
        if(rst_n) begin
          precharge: cover (~cs_n & ~ras_n & cas_n & ~we_n);
          auto_refresh: cover (~cs_n & ~ras_n & ~cas_n & we_n);
          command_inhibit: cover (~cs_n & ras_n & cas_n & we_n);
          load_mode_register: cover (~cs_n & ~ras_n & ~cas_n & ~we_n);
          activate: cover (~cs_n & ~ras_n & cas_n & we_n);
          read: cover (~cs_n & ras_n & ~cas_n & we_n);
          write: cover (~cs_n & ras_n & ~cas_n & ~we_n);
        end
    end
`endif
endmodule

------
I also have a testbench for the DUT. Here's the Python code of the testbench:
------
TESTBENCH CODE
# scale_factor_queue_pop should be high?

import sys
import os

import random
import math

import functools
import zmq
import pickle
from contextlib import closing

import cocotb
from cocotb.clock import Clock
from cocotb.triggers import Timer, ClockCycles, ReadWrite, ReadOnly, Event, RisingEdge

directory = os.path.dirname(os.path.abspath(""__file__""))
sys.path.insert(0, os.path.dirname(directory))

from shared_helpers.cocotb_helpers import *
from sdram_controller.shared_types import *

class CoverageMonitor:

    def __init__(self):
        self.coverage_database = CoverageDatabase()
        self.coverage_database.misc_bins= {
            ""precharge"": 0,
            ""auto_refresh"": 0,
            ""command_inhibit"": 0,
            ""load_mode_register"":0,
            ""activate"": 0,
            ""read"": 0,
            ""write"": 0
        }

        self.coverage_sampled_event = Event()

# Produces the stimulus for the testbench based on observed coverage
class SimulationController:
    def __init__(self, dut, coverage_monitor, zmq_addr):
        self.dut = dut
        self.coverage_monitor = coverage_monitor
        self.end_simulation_event = Event()
        self.zmq_context = zmq.Context()
        self.zmq_addr = zmq_addr

    # Handles driving a new_value when one is provided by `determine_next_value`
    async def controller_loop(self):
        await cocotb.start(async_check_hits(self))
        with self.zmq_context.socket(zmq.REP) as socket:
            socket.bind(self.zmq_addr)

            while True:
                stimulus_msg = socket.recv()
                stimulus_obj = pickle.loads(stimulus_msg)
                print(stimulus_obj)

                dut_state = self.sample_dut_state()
                wr_enable = stimulus_obj.value[0]
                rd_enable = stimulus_obj.value[1]
                reset = stimulus_obj.value[2]

                while (self.dut.state_cnt.value != 0):
                    await ClockCycles(self.dut.clk, 1)

                if(reset):
                    reset_cycles = 3
                    self.dut.rst_n.value = 0
                    print(""RESET"")
                else:
                    reset_cycles = -1
                    self.dut.rst_n.value = 1

                self.dut.wr_enable.value = wr_enable
                self.dut.rd_enable.value = rd_enable

                print(self.dut.state.value)
                await ClockCycles(self.dut.clk, 1)
                while(self.dut.busy.value or reset_cycles > 0):
                    await ClockCycles(self.dut.clk, 1)
                    reset_cycles -= 1
                self.dut.rst_n.value = 1

                socket.send_pyobj((dut_state, self.coverage_monitor.coverage_database))

                if stimulus_obj.finish:
                    self.end_simulation_event.set()
                    break
    
    def check_hits(self):
        cs = self.dut.cs_n.value
        ras = self.dut.ras_n.value
        cas = self.dut.cas_n.value
        we = self.dut.we_n.value

        if(not cs and not ras and cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""precharge""] += 1
        if(not cs and not ras and not cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""auto_refresh""] += 1
        if(not cs and ras and cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""command_inhibit""] += 1
        if(not cs and not ras and not cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""load_mode_register""] += 1
        if(not cs and not ras and cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""activate""] += 1
        if(not cs and ras and not cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""read""] += 1
        if(not cs and ras and not cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""write""] += 1


    def sample_dut_state(self):
        return DUTState(
        )
    
    def close(self):
        self.zmq_context.term()

    def run_controller(self):
        cocotb.start_soon(self.controller_loop())

async def async_check_hits(simulation_controller):
    while(not simulation_controller.end_simulation_event.is_set()):
        await RisingEdge(simulation_controller.dut.clk)
        simulation_controller.check_hits()

@cocotb.test()
async def basic_test(dut):
    from global_shared_types import GlobalCoverageDatabase

    server_port = ""5050""
    # server_port = input(""Please enter server's port (e.g. 5050, 5555): "")

    trial_cnt = 0

    while True:
        trial_cnt += 1

        coverage_monitor = CoverageMonitor()
        cocotb.start_soon(Clock(dut.clk, 100, units=""ns"").start())

        await do_reset(dut.rst_n, dut.clk, 3)

        with closing(
            SimulationController(dut, coverage_monitor, f""tcp://*:{server_port}"")
        ) as simulation_controller:
            simulation_controller.run_controller()

            # Wait for end of simulation to be signalled. Give the design a few more
            # clocks to run before outputting final coverage values
            await simulation_controller.end_simulation_event.wait()
            await Timer(5, units=""ns"")

            print(f""***** FINAL COVERAGE of trial #{trial_cnt} *****"")
            print(
                GlobalCoverageDatabase(
                    coverage_monitor.coverage_database
                ).get_coverage_rate()
            )
        break
------
Now, we want to test the DUT with a list of commands as its input. We want the input to cover the bins (i.e. test cases) that we care about. Here's the description of the bins that we care about:
------
BINS DESCRIPTION
- You provide a list of lists, in the format: [[int, int, int], [int, int, int], ...]
- The DUT is an SDRAM controller (without burst support)
- The two integers in each list correspond to two input signal to the SDRAM controller:
    - First integer: write enable.
    - Second integer: read enable.
    - Third integer: reset. It is not advised to reset the design regularly.
- At least one clock cycle will pass between writing the inner lists on the inputs.
- Other inputs, such as address and data are not important, you will not provide these.
- The coverage bins are the possible commands the SDRAM controller can generate for the SDRAM. You need to cover each of the following bins with your commands:
---
    - precharge: deactivate (close) the current row of all banks
    - auto_refresh: refresh one row of each bank, using an internal counter. All banks must be precharged.
    - command_inhibit: command inhibit (no operation)
    - load_mode_register: configure the DRAM chip
    - activate: open a row for read and write commands
    - read: read data from the currently active row
    - write: write data to the currently active row
---
------

----------
Following the bins description, and refer to the programs, generate a list of integer pairs which covers the described bins as much as you can.
""",4951,"""[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]""",72,none,5,"{'precharge': 72, 'auto_refresh': 26, 'command_inhibit': 1496, 'load_mode_register': 1, 'activate': 1}"
9,2,2,5214,"""The values you provided failed to cover all the bins.
You will see the result coverage of your previous response(s), and then generate another list of integer pairs to cover the unreached bins (i.e. test cases)
Here are some of the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5124,"""[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 1, 0], [1, 0, 1]]""",90,none,5,"{'precharge': 77, 'auto_refresh': 26, 'command_inhibit': 1596, 'load_mode_register': 1, 'activate': 1}"
10,2,3,5441,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5333,"""[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 1, 0], [1, 0, 1], [1, 1, 1], [1, 1, 0]]""",108,none,5,"{'precharge': 84, 'auto_refresh': 26, 'command_inhibit': 1731, 'load_mode_register': 1, 'activate': 1}"
11,2,4,5686,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5560,"""[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 1, 0], [1, 0, 1], [1, 1, 1], [1, 1, 0], [0, 0, 1], [1, 0, 0]]""",126,none,5,"{'precharge': 91, 'auto_refresh': 27, 'command_inhibit': 1870, 'load_mode_register': 1, 'activate': 1}"
12,2,5,5940,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5805,"""[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 1, 0], [1, 0, 1], [1, 1, 1], [1, 1, 0], [0, 0, 1], [1, 0, 0], [0, 1, 1]]""",135,none,5,"{'precharge': 98, 'auto_refresh': 28, 'command_inhibit': 2013, 'load_mode_register': 1, 'activate': 1}"
13,2,6,6243,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5973,"""[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 1, 0], [1, 0, 1], [1, 1, 1], [1, 1, 0], [0, 0, 1], [1, 0, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0], [0, 0, 1], [1, 1, 0], [0, 1, 0], [1, 0, 1], [1, 1, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [0, 0, 1], [1, 1, 0], [0, 1, 0], [0, 0, 0]]""",270,none,5,"{'precharge': 113, 'auto_refresh': 31, 'command_inhibit': 2307, 'load_mode_register': 1, 'activate': 1}"
14,2,7,6018,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5883,"""[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [0, 1, 0], [1, 0, 1], [1, 1, 1], [1, 1, 0], [0, 0, 1], [1, 0, 0], [0, 1, 1]]""",135,reset,5,"{'precharge': 120, 'auto_refresh': 32, 'command_inhibit': 2457, 'load_mode_register': 1, 'activate': 1}"
15,3,1,5014,"""You will receive code of a DUT and a testbench for it, as well as a description of bins (i.e. test cases). 
----------
I have a device under test (DUT). Here's the SystemVerilog code of the DUT:
------
DUT CODE
/**
 * simple controller for ISSI IS42S16160G-7 SDRAM found in De0 Nano
 *  16Mbit x 16 data bit bus (32 megabytes)
 *  Default options
 *    133Mhz
 *    CAS 3
 *
 *  Very simple host interface
 *     * No burst support
 *     * haddr - address for reading and wriging 16 bits of data
 *     * data_input - data for writing, latched in when wr_enable is highz0
 *     * data_output - data for reading, comes available sometime
 *       *few clocks* after rd_enable and address is presented on bus
 *     * rst_n - start init ram process
 *     * rd_enable - read enable, on clk posedge haddr will be latched in,
 *       after *few clocks* data will be available on the data_output port
 *     * wr_enable - write enable, on clk posedge haddr and data_input will
 *       be latched in, after *few clocks* data will be written to sdram
 *
 * Theory
 *  This simple host interface has a busy signal to tell you when you are
 *  not able to issue commands.
 */

module sdram_controller (
    /* HOST INTERFACE */
    wr_addr,
    wr_data,
    wr_enable,

    rd_addr,
    rd_data,
    rd_ready,
    rd_enable,

    busy, rst_n, clk,

    /* SDRAM SIDE */
    addr, bank_addr, data, clock_enable, cs_n, ras_n, cas_n, we_n,
    data_mask_low, data_mask_high
);

/* Internal Parameters */
parameter ROW_WIDTH = 13;
parameter COL_WIDTH = 9;
parameter BANK_WIDTH = 2;

parameter SDRADDR_WIDTH = ROW_WIDTH > COL_WIDTH ? ROW_WIDTH : COL_WIDTH;
parameter HADDR_WIDTH = BANK_WIDTH + ROW_WIDTH + COL_WIDTH;

parameter CLK_FREQUENCY = 133;  // Mhz
parameter REFRESH_TIME =  32;   // ms     (how often we need to refresh)
parameter REFRESH_COUNT = 8192; // cycles (how many refreshes required per refresh time)

// clk / refresh =  clk / sec
//                , sec / refbatch
//                , ref / refbatch
localparam CYCLES_BETWEEN_REFRESH = ( CLK_FREQUENCY
                                      * 1_000
                                      * REFRESH_TIME
                                    ) / REFRESH_COUNT;

// STATES - State
localparam IDLE      = 5'b00000;

localparam INIT_NOP1 = 5'b01000,
           INIT_PRE1 = 5'b01001,
           INIT_NOP1_1=5'b00101,
           INIT_REF1 = 5'b01010,
           INIT_NOP2 = 5'b01011,
           INIT_REF2 = 5'b01100,
           INIT_NOP3 = 5'b01101,
           INIT_LOAD = 5'b01110,
           INIT_NOP4 = 5'b01111;

localparam REF_PRE  =  5'b00001,
           REF_NOP1 =  5'b00010,
           REF_REF  =  5'b00011,
           REF_NOP2 =  5'b00100;

localparam READ_ACT  = 5'b10000,
           READ_NOP1 = 5'b10001,
           READ_CAS  = 5'b10010,
           READ_NOP2 = 5'b10011,
           READ_READ = 5'b10100;

localparam WRIT_ACT  = 5'b11000,
           WRIT_NOP1 = 5'b11001,
           WRIT_CAS  = 5'b11010,
           WRIT_NOP2 = 5'b11011;

// Commands              CCRCWBBA
//                       ESSSE100
localparam CMD_PALL = 8'b10010001,
           CMD_REF  = 8'b10001000,
           CMD_NOP  = 8'b10111000,
           CMD_MRS  = 8'b1000000x,
           CMD_BACT = 8'b10011xxx,
           CMD_READ = 8'b10101xx1,
           CMD_WRIT = 8'b10100xx1;

/* Interface Definition */
/* HOST INTERFACE */
input  [HADDR_WIDTH-1:0]   wr_addr;
input  [15:0]              wr_data;
input                      wr_enable;

input  [HADDR_WIDTH-1:0]   rd_addr;
output [15:0]              rd_data;
input                      rd_enable;
output                     rd_ready;

output                     busy;
input                      rst_n;
input                      clk;

/* SDRAM SIDE */
output [SDRADDR_WIDTH-1:0] addr;
output [BANK_WIDTH-1:0]    bank_addr;
inout  [15:0]              data;
output                     clock_enable;
output                     cs_n;
output                     ras_n;
output                     cas_n;
output                     we_n;
output                     data_mask_low;
output                     data_mask_high;

/* I/O Registers */

reg  [HADDR_WIDTH-1:0]   haddr_r;
reg  [15:0]              wr_data_r;
reg  [15:0]              rd_data_r;
reg                      busy;
reg                      data_mask_low_r;
reg                      data_mask_high_r;
reg [SDRADDR_WIDTH-1:0]  addr_r;
reg [BANK_WIDTH-1:0]     bank_addr_r;
reg                      rd_ready_r;

wire [15:0]              data_output;
wire                     data_mask_low, data_mask_high;

assign data_mask_high = data_mask_high_r;
assign data_mask_low  = data_mask_low_r;
assign rd_data        = rd_data_r;

/* Internal Wiring */
reg [3:0] state_cnt;
reg [9:0] refresh_cnt;

reg [7:0] command;
reg [4:0] state;

// TODO output addr[6:4] when programming mode register

reg [7:0] command_nxt;
reg [3:0] state_cnt_nxt;
reg [4:0] next;

assign {clock_enable, cs_n, ras_n, cas_n, we_n} = command[7:3];
// state[4] will be set if mode is read/write
assign bank_addr      = (state[4]) ? bank_addr_r : command[2:1];
assign addr           = (state[4] | state == INIT_LOAD) ? addr_r : { {SDRADDR_WIDTH-11{1'b0}}, command[0], 10'd0 };

assign data = (state == WRIT_CAS) ? wr_data_r : 16'bz;
assign rd_ready = rd_ready_r;

// HOST INTERFACE
// all registered on posedge
always @ (posedge clk)
  if (~rst_n)
    begin
    state <= INIT_NOP1;
    command <= CMD_NOP;
    state_cnt <= 4'hf;

    haddr_r <= {HADDR_WIDTH{1'b0}};
    wr_data_r <= 16'b0;
    rd_data_r <= 16'b0;
    busy <= 1'b0;
    end
  else
    begin

    state <= next;
    command <= command_nxt;

    if (!state_cnt)
      state_cnt <= state_cnt_nxt;
    else
      state_cnt <= state_cnt - 1'b1;

    if (wr_enable)
      wr_data_r <= wr_data;

    if (state == READ_READ)
      begin
      rd_data_r <= data;
      rd_ready_r <= 1'b1;
      end
    else
      rd_ready_r <= 1'b0;

    busy <= state[4];

    if (rd_enable)
      haddr_r <= rd_addr;
    else if (wr_enable)
      haddr_r <= wr_addr;

    end

// Handle refresh counter
always @ (posedge clk)
 if (~rst_n)
   refresh_cnt <= 10'b0;
 else
   if (state == REF_NOP2)
     refresh_cnt <= 10'b0;
   else
     refresh_cnt <= refresh_cnt + 1'b1;


/* Handle logic for sending addresses to SDRAM based on current state*/
always @*
begin
    if (state[4])
      {data_mask_low_r, data_mask_high_r} = 2'b00;
    else
      {data_mask_low_r, data_mask_high_r} = 2'b11;

   bank_addr_r = 2'b00;
   addr_r = {SDRADDR_WIDTH{1'b0}};

   if (state == READ_ACT | state == WRIT_ACT)
     begin
     bank_addr_r = haddr_r[HADDR_WIDTH-1:HADDR_WIDTH-(BANK_WIDTH)];
     addr_r = haddr_r[HADDR_WIDTH-(BANK_WIDTH+1):HADDR_WIDTH-(BANK_WIDTH+ROW_WIDTH)];
     end
   else if (state == READ_CAS | state == WRIT_CAS)
     begin
     // Send Column Address
     // Set bank to bank to precharge
     bank_addr_r = haddr_r[HADDR_WIDTH-1:HADDR_WIDTH-(BANK_WIDTH)];

     // Examples for math
     //               BANK  ROW    COL
     // HADDR_WIDTH   2 +   13 +   9   = 24
     // SDRADDR_WIDTH 13

     // Set CAS address to:
     //   0s,
     //   1 (A10 is always for auto precharge),
     //   0s,
     //   column address
     addr_r = {
               {SDRADDR_WIDTH-(11){1'b0}},
               1'b1,                       /* A10 */
               {10-COL_WIDTH{1'b0}},
               haddr_r[COL_WIDTH-1:0]
              };
     end
   else if (state == INIT_LOAD)
     begin
     // Program mode register during load cycle
     //                                       B  C  SB
     //                                       R  A  EUR
     //                                       S  S-3Q ST
     //                                       T  654L210
     addr_r = {{SDRADDR_WIDTH-10{1'b0}}, 10'b1000110000};
     end
end

// Next state logic
always @*
begin
   state_cnt_nxt = 4'd0;
   command_nxt = CMD_NOP;
   if (state == IDLE)
        // Monitor for refresh or hold
        if (refresh_cnt >= CYCLES_BETWEEN_REFRESH)
          begin
          next = REF_PRE;
          command_nxt = CMD_PALL;
          end
        else if (rd_enable)
          begin
          next = READ_ACT;
          command_nxt = CMD_BACT;
          end
        else if (wr_enable)
          begin
          next = WRIT_ACT;
          command_nxt = CMD_BACT;
          end
        else
          begin
          // HOLD
          next = IDLE;
          end
    else
      if (!state_cnt)
        case (state)
          // INIT ENGINE
          INIT_NOP1:
            begin
            next = INIT_PRE1;
            command_nxt = CMD_PALL;
            end
          INIT_PRE1:
            begin
            next = INIT_NOP1_1;
            end
          INIT_NOP1_1:
            begin
            next = INIT_REF1;
            command_nxt = CMD_REF;
            end
          INIT_REF1:
            begin
            next = INIT_NOP2;
            state_cnt_nxt = 4'd7;
            end
          INIT_NOP2:
            begin
            next = INIT_REF2;
            command_nxt = CMD_REF;
            end
          INIT_REF2:
            begin
            next = INIT_NOP3;
            state_cnt_nxt = 4'd7;
            end
          INIT_NOP3:
            begin
            next = INIT_LOAD;
            command_nxt = CMD_MRS;
            end
          INIT_LOAD:
            begin
            next = INIT_NOP4;
            state_cnt_nxt = 4'd1;
            end
          // INIT_NOP4: default - IDLE

          // REFRESH
          REF_PRE:
            begin
            next = REF_NOP1;
            end
          REF_NOP1:
            begin
            next = REF_REF;
            command_nxt = CMD_REF;
            end
          REF_REF:
            begin
            next = REF_NOP2;
            state_cnt_nxt = 4'd7;
            end
          // REF_NOP2: default - IDLE

          // WRITE
          WRIT_ACT:
            begin
            next = WRIT_NOP1;
            state_cnt_nxt = 4'd1;
            end
          WRIT_NOP1:
            begin
            next = WRIT_CAS;
            command_nxt = CMD_WRIT;
            end
          WRIT_CAS:
            begin
            next = WRIT_NOP2;
            state_cnt_nxt = 4'd1;
            end
          // WRIT_NOP2: default - IDLE

          // READ
          READ_ACT:
            begin
            next = READ_NOP1;
            state_cnt_nxt = 4'd1;
            end
          READ_NOP1:
            begin
            next = READ_CAS;
            command_nxt = CMD_READ;
            end
          READ_CAS:
            begin
            next = READ_NOP2;
            state_cnt_nxt = 4'd1;
            end
          READ_NOP2:
            begin
            next = READ_READ;
            end
          // READ_READ: default - IDLE

          default:
            begin
            next = IDLE;
            end
          endcase
      else
        begin
        // Counter Not Reached - HOLD
        next = state;
        command_nxt = command;
        end
end
`ifdef FORMAL
    logic [3:0] cycle_count;
    
    initial begin 
        assume(~rst_n)
        cycle_count <= 0;
    end

    always @(posedge clk) begin
        if (cycle_count < 10)
            cycle_count <= cycle_count + 1;
    end

    assume property ( @(posedge clk) cycle_count < 5 |-> ~rst_n );
    assume property ( @(posedge clk) cycle_count > 4 |-> rst_n );

    always @(posedge clk) begin
        if(rst_n) begin
          precharge: cover (~cs_n & ~ras_n & cas_n & ~we_n);
          auto_refresh: cover (~cs_n & ~ras_n & ~cas_n & we_n);
          command_inhibit: cover (~cs_n & ras_n & cas_n & we_n);
          load_mode_register: cover (~cs_n & ~ras_n & ~cas_n & ~we_n);
          activate: cover (~cs_n & ~ras_n & cas_n & we_n);
          read: cover (~cs_n & ras_n & ~cas_n & we_n);
          write: cover (~cs_n & ras_n & ~cas_n & ~we_n);
        end
    end
`endif
endmodule

------
I also have a testbench for the DUT. Here's the Python code of the testbench:
------
TESTBENCH CODE
# scale_factor_queue_pop should be high?

import sys
import os

import random
import math

import functools
import zmq
import pickle
from contextlib import closing

import cocotb
from cocotb.clock import Clock
from cocotb.triggers import Timer, ClockCycles, ReadWrite, ReadOnly, Event, RisingEdge

directory = os.path.dirname(os.path.abspath(""__file__""))
sys.path.insert(0, os.path.dirname(directory))

from shared_helpers.cocotb_helpers import *
from sdram_controller.shared_types import *

class CoverageMonitor:

    def __init__(self):
        self.coverage_database = CoverageDatabase()
        self.coverage_database.misc_bins= {
            ""precharge"": 0,
            ""auto_refresh"": 0,
            ""command_inhibit"": 0,
            ""load_mode_register"":0,
            ""activate"": 0,
            ""read"": 0,
            ""write"": 0
        }

        self.coverage_sampled_event = Event()

# Produces the stimulus for the testbench based on observed coverage
class SimulationController:
    def __init__(self, dut, coverage_monitor, zmq_addr):
        self.dut = dut
        self.coverage_monitor = coverage_monitor
        self.end_simulation_event = Event()
        self.zmq_context = zmq.Context()
        self.zmq_addr = zmq_addr

    # Handles driving a new_value when one is provided by `determine_next_value`
    async def controller_loop(self):
        await cocotb.start(async_check_hits(self))
        with self.zmq_context.socket(zmq.REP) as socket:
            socket.bind(self.zmq_addr)

            while True:
                stimulus_msg = socket.recv()
                stimulus_obj = pickle.loads(stimulus_msg)
                print(stimulus_obj)

                dut_state = self.sample_dut_state()
                wr_enable = stimulus_obj.value[0]
                rd_enable = stimulus_obj.value[1]
                reset = stimulus_obj.value[2]

                while (self.dut.state_cnt.value != 0):
                    await ClockCycles(self.dut.clk, 1)

                if(reset):
                    reset_cycles = 3
                    self.dut.rst_n.value = 0
                    print(""RESET"")
                else:
                    reset_cycles = -1
                    self.dut.rst_n.value = 1

                self.dut.wr_enable.value = wr_enable
                self.dut.rd_enable.value = rd_enable

                print(self.dut.state.value)
                await ClockCycles(self.dut.clk, 1)
                while(self.dut.busy.value or reset_cycles > 0):
                    await ClockCycles(self.dut.clk, 1)
                    reset_cycles -= 1
                self.dut.rst_n.value = 1

                socket.send_pyobj((dut_state, self.coverage_monitor.coverage_database))

                if stimulus_obj.finish:
                    self.end_simulation_event.set()
                    break
    
    def check_hits(self):
        cs = self.dut.cs_n.value
        ras = self.dut.ras_n.value
        cas = self.dut.cas_n.value
        we = self.dut.we_n.value

        if(not cs and not ras and cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""precharge""] += 1
        if(not cs and not ras and not cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""auto_refresh""] += 1
        if(not cs and ras and cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""command_inhibit""] += 1
        if(not cs and not ras and not cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""load_mode_register""] += 1
        if(not cs and not ras and cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""activate""] += 1
        if(not cs and ras and not cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""read""] += 1
        if(not cs and ras and not cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""write""] += 1


    def sample_dut_state(self):
        return DUTState(
        )
    
    def close(self):
        self.zmq_context.term()

    def run_controller(self):
        cocotb.start_soon(self.controller_loop())

async def async_check_hits(simulation_controller):
    while(not simulation_controller.end_simulation_event.is_set()):
        await RisingEdge(simulation_controller.dut.clk)
        simulation_controller.check_hits()

@cocotb.test()
async def basic_test(dut):
    from global_shared_types import GlobalCoverageDatabase

    server_port = ""5050""
    # server_port = input(""Please enter server's port (e.g. 5050, 5555): "")

    trial_cnt = 0

    while True:
        trial_cnt += 1

        coverage_monitor = CoverageMonitor()
        cocotb.start_soon(Clock(dut.clk, 100, units=""ns"").start())

        await do_reset(dut.rst_n, dut.clk, 3)

        with closing(
            SimulationController(dut, coverage_monitor, f""tcp://*:{server_port}"")
        ) as simulation_controller:
            simulation_controller.run_controller()

            # Wait for end of simulation to be signalled. Give the design a few more
            # clocks to run before outputting final coverage values
            await simulation_controller.end_simulation_event.wait()
            await Timer(5, units=""ns"")

            print(f""***** FINAL COVERAGE of trial #{trial_cnt} *****"")
            print(
                GlobalCoverageDatabase(
                    coverage_monitor.coverage_database
                ).get_coverage_rate()
            )
        break
------
Now, we want to test the DUT with a list of commands as its input. We want the input to cover the bins (i.e. test cases) that we care about. Here's the description of the bins that we care about:
------
BINS DESCRIPTION
- You provide a list of lists, in the format: [[int, int, int], [int, int, int], ...]
- The DUT is an SDRAM controller (without burst support)
- The two integers in each list correspond to two input signal to the SDRAM controller:
    - First integer: write enable.
    - Second integer: read enable.
    - Third integer: reset. It is not advised to reset the design regularly.
- At least one clock cycle will pass between writing the inner lists on the inputs.
- Other inputs, such as address and data are not important, you will not provide these.
- The coverage bins are the possible commands the SDRAM controller can generate for the SDRAM. You need to cover each of the following bins with your commands:
---
    - precharge: deactivate (close) the current row of all banks
    - auto_refresh: refresh one row of each bank, using an internal counter. All banks must be precharged.
    - command_inhibit: command inhibit (no operation)
    - load_mode_register: configure the DRAM chip
    - activate: open a row for read and write commands
    - read: read data from the currently active row
    - write: write data to the currently active row
---
------

----------
Following the bins description, and refer to the programs, generate a list of integer pairs which covers the described bins as much as you can.
""",4951,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0], [1, 0, 1], [0, 1, 1], [1, 1, 1]]""",63,none,5,"{'precharge': 124, 'auto_refresh': 33, 'command_inhibit': 2535, 'load_mode_register': 1, 'activate': 1}"
16,3,2,5205,"""The values you provided failed to cover all the bins.
You will see the result coverage of your previous response(s), and then generate another list of integer pairs to cover the unreached bins (i.e. test cases)
Here are some of the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5115,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0], [1, 0, 1], [0, 1, 1], [1, 1, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0]]""",90,none,5,"{'precharge': 130, 'auto_refresh': 34, 'command_inhibit': 2649, 'load_mode_register': 1, 'activate': 1}"
17,3,3,5414,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5324,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0], [1, 0, 1], [0, 1, 1], [1, 1, 1], [0, 0, 0], [1, 0, 0], [0, 0, 0]]""",90,none,5,"{'precharge': 134, 'auto_refresh': 36, 'command_inhibit': 2729, 'load_mode_register': 1, 'activate': 1}"
18,3,4,5623,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5533,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0], [1, 0, 1], [0, 1, 1], [1, 1, 1], [0, 0, 0], [1, 0, 0], [0, 1, 1]]""",90,none,5,"{'precharge': 138, 'auto_refresh': 38, 'command_inhibit': 2819, 'load_mode_register': 1, 'activate': 1}"
19,3,5,5832,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5742,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0], [1, 0, 1], [0, 1, 1], [1, 1, 1], [0, 0, 0], [1, 0, 0], [0, 1, 0]]""",90,none,5,"{'precharge': 143, 'auto_refresh': 40, 'command_inhibit': 2914, 'load_mode_register': 1, 'activate': 1}"
20,3,6,6075,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5985,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0], [1, 0, 1], [0, 1, 1], [1, 1, 1], [0, 0, 0], [1, 0, 0], [0, 1, 1]]""",90,none,5,"{'precharge': 147, 'auto_refresh': 42, 'command_inhibit': 3004, 'load_mode_register': 1, 'activate': 1}"
21,3,7,6585,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",6441,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0], [1, 0, 1], [0, 1, 1], [1, 1, 1], [0, 0, 0], [1, 0, 0], [0, 1, 1], [1, 0, 1], [0, 0, 0], [1, 1, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1]]""",144,reset,5,"{'precharge': 155, 'auto_refresh': 45, 'command_inhibit': 3161, 'load_mode_register': 1, 'activate': 1}"
22,4,1,5023,"""You will receive code of a DUT and a testbench for it, as well as a description of bins (i.e. test cases). 
----------
I have a device under test (DUT). Here's the SystemVerilog code of the DUT:
------
DUT CODE
/**
 * simple controller for ISSI IS42S16160G-7 SDRAM found in De0 Nano
 *  16Mbit x 16 data bit bus (32 megabytes)
 *  Default options
 *    133Mhz
 *    CAS 3
 *
 *  Very simple host interface
 *     * No burst support
 *     * haddr - address for reading and wriging 16 bits of data
 *     * data_input - data for writing, latched in when wr_enable is highz0
 *     * data_output - data for reading, comes available sometime
 *       *few clocks* after rd_enable and address is presented on bus
 *     * rst_n - start init ram process
 *     * rd_enable - read enable, on clk posedge haddr will be latched in,
 *       after *few clocks* data will be available on the data_output port
 *     * wr_enable - write enable, on clk posedge haddr and data_input will
 *       be latched in, after *few clocks* data will be written to sdram
 *
 * Theory
 *  This simple host interface has a busy signal to tell you when you are
 *  not able to issue commands.
 */

module sdram_controller (
    /* HOST INTERFACE */
    wr_addr,
    wr_data,
    wr_enable,

    rd_addr,
    rd_data,
    rd_ready,
    rd_enable,

    busy, rst_n, clk,

    /* SDRAM SIDE */
    addr, bank_addr, data, clock_enable, cs_n, ras_n, cas_n, we_n,
    data_mask_low, data_mask_high
);

/* Internal Parameters */
parameter ROW_WIDTH = 13;
parameter COL_WIDTH = 9;
parameter BANK_WIDTH = 2;

parameter SDRADDR_WIDTH = ROW_WIDTH > COL_WIDTH ? ROW_WIDTH : COL_WIDTH;
parameter HADDR_WIDTH = BANK_WIDTH + ROW_WIDTH + COL_WIDTH;

parameter CLK_FREQUENCY = 133;  // Mhz
parameter REFRESH_TIME =  32;   // ms     (how often we need to refresh)
parameter REFRESH_COUNT = 8192; // cycles (how many refreshes required per refresh time)

// clk / refresh =  clk / sec
//                , sec / refbatch
//                , ref / refbatch
localparam CYCLES_BETWEEN_REFRESH = ( CLK_FREQUENCY
                                      * 1_000
                                      * REFRESH_TIME
                                    ) / REFRESH_COUNT;

// STATES - State
localparam IDLE      = 5'b00000;

localparam INIT_NOP1 = 5'b01000,
           INIT_PRE1 = 5'b01001,
           INIT_NOP1_1=5'b00101,
           INIT_REF1 = 5'b01010,
           INIT_NOP2 = 5'b01011,
           INIT_REF2 = 5'b01100,
           INIT_NOP3 = 5'b01101,
           INIT_LOAD = 5'b01110,
           INIT_NOP4 = 5'b01111;

localparam REF_PRE  =  5'b00001,
           REF_NOP1 =  5'b00010,
           REF_REF  =  5'b00011,
           REF_NOP2 =  5'b00100;

localparam READ_ACT  = 5'b10000,
           READ_NOP1 = 5'b10001,
           READ_CAS  = 5'b10010,
           READ_NOP2 = 5'b10011,
           READ_READ = 5'b10100;

localparam WRIT_ACT  = 5'b11000,
           WRIT_NOP1 = 5'b11001,
           WRIT_CAS  = 5'b11010,
           WRIT_NOP2 = 5'b11011;

// Commands              CCRCWBBA
//                       ESSSE100
localparam CMD_PALL = 8'b10010001,
           CMD_REF  = 8'b10001000,
           CMD_NOP  = 8'b10111000,
           CMD_MRS  = 8'b1000000x,
           CMD_BACT = 8'b10011xxx,
           CMD_READ = 8'b10101xx1,
           CMD_WRIT = 8'b10100xx1;

/* Interface Definition */
/* HOST INTERFACE */
input  [HADDR_WIDTH-1:0]   wr_addr;
input  [15:0]              wr_data;
input                      wr_enable;

input  [HADDR_WIDTH-1:0]   rd_addr;
output [15:0]              rd_data;
input                      rd_enable;
output                     rd_ready;

output                     busy;
input                      rst_n;
input                      clk;

/* SDRAM SIDE */
output [SDRADDR_WIDTH-1:0] addr;
output [BANK_WIDTH-1:0]    bank_addr;
inout  [15:0]              data;
output                     clock_enable;
output                     cs_n;
output                     ras_n;
output                     cas_n;
output                     we_n;
output                     data_mask_low;
output                     data_mask_high;

/* I/O Registers */

reg  [HADDR_WIDTH-1:0]   haddr_r;
reg  [15:0]              wr_data_r;
reg  [15:0]              rd_data_r;
reg                      busy;
reg                      data_mask_low_r;
reg                      data_mask_high_r;
reg [SDRADDR_WIDTH-1:0]  addr_r;
reg [BANK_WIDTH-1:0]     bank_addr_r;
reg                      rd_ready_r;

wire [15:0]              data_output;
wire                     data_mask_low, data_mask_high;

assign data_mask_high = data_mask_high_r;
assign data_mask_low  = data_mask_low_r;
assign rd_data        = rd_data_r;

/* Internal Wiring */
reg [3:0] state_cnt;
reg [9:0] refresh_cnt;

reg [7:0] command;
reg [4:0] state;

// TODO output addr[6:4] when programming mode register

reg [7:0] command_nxt;
reg [3:0] state_cnt_nxt;
reg [4:0] next;

assign {clock_enable, cs_n, ras_n, cas_n, we_n} = command[7:3];
// state[4] will be set if mode is read/write
assign bank_addr      = (state[4]) ? bank_addr_r : command[2:1];
assign addr           = (state[4] | state == INIT_LOAD) ? addr_r : { {SDRADDR_WIDTH-11{1'b0}}, command[0], 10'd0 };

assign data = (state == WRIT_CAS) ? wr_data_r : 16'bz;
assign rd_ready = rd_ready_r;

// HOST INTERFACE
// all registered on posedge
always @ (posedge clk)
  if (~rst_n)
    begin
    state <= INIT_NOP1;
    command <= CMD_NOP;
    state_cnt <= 4'hf;

    haddr_r <= {HADDR_WIDTH{1'b0}};
    wr_data_r <= 16'b0;
    rd_data_r <= 16'b0;
    busy <= 1'b0;
    end
  else
    begin

    state <= next;
    command <= command_nxt;

    if (!state_cnt)
      state_cnt <= state_cnt_nxt;
    else
      state_cnt <= state_cnt - 1'b1;

    if (wr_enable)
      wr_data_r <= wr_data;

    if (state == READ_READ)
      begin
      rd_data_r <= data;
      rd_ready_r <= 1'b1;
      end
    else
      rd_ready_r <= 1'b0;

    busy <= state[4];

    if (rd_enable)
      haddr_r <= rd_addr;
    else if (wr_enable)
      haddr_r <= wr_addr;

    end

// Handle refresh counter
always @ (posedge clk)
 if (~rst_n)
   refresh_cnt <= 10'b0;
 else
   if (state == REF_NOP2)
     refresh_cnt <= 10'b0;
   else
     refresh_cnt <= refresh_cnt + 1'b1;


/* Handle logic for sending addresses to SDRAM based on current state*/
always @*
begin
    if (state[4])
      {data_mask_low_r, data_mask_high_r} = 2'b00;
    else
      {data_mask_low_r, data_mask_high_r} = 2'b11;

   bank_addr_r = 2'b00;
   addr_r = {SDRADDR_WIDTH{1'b0}};

   if (state == READ_ACT | state == WRIT_ACT)
     begin
     bank_addr_r = haddr_r[HADDR_WIDTH-1:HADDR_WIDTH-(BANK_WIDTH)];
     addr_r = haddr_r[HADDR_WIDTH-(BANK_WIDTH+1):HADDR_WIDTH-(BANK_WIDTH+ROW_WIDTH)];
     end
   else if (state == READ_CAS | state == WRIT_CAS)
     begin
     // Send Column Address
     // Set bank to bank to precharge
     bank_addr_r = haddr_r[HADDR_WIDTH-1:HADDR_WIDTH-(BANK_WIDTH)];

     // Examples for math
     //               BANK  ROW    COL
     // HADDR_WIDTH   2 +   13 +   9   = 24
     // SDRADDR_WIDTH 13

     // Set CAS address to:
     //   0s,
     //   1 (A10 is always for auto precharge),
     //   0s,
     //   column address
     addr_r = {
               {SDRADDR_WIDTH-(11){1'b0}},
               1'b1,                       /* A10 */
               {10-COL_WIDTH{1'b0}},
               haddr_r[COL_WIDTH-1:0]
              };
     end
   else if (state == INIT_LOAD)
     begin
     // Program mode register during load cycle
     //                                       B  C  SB
     //                                       R  A  EUR
     //                                       S  S-3Q ST
     //                                       T  654L210
     addr_r = {{SDRADDR_WIDTH-10{1'b0}}, 10'b1000110000};
     end
end

// Next state logic
always @*
begin
   state_cnt_nxt = 4'd0;
   command_nxt = CMD_NOP;
   if (state == IDLE)
        // Monitor for refresh or hold
        if (refresh_cnt >= CYCLES_BETWEEN_REFRESH)
          begin
          next = REF_PRE;
          command_nxt = CMD_PALL;
          end
        else if (rd_enable)
          begin
          next = READ_ACT;
          command_nxt = CMD_BACT;
          end
        else if (wr_enable)
          begin
          next = WRIT_ACT;
          command_nxt = CMD_BACT;
          end
        else
          begin
          // HOLD
          next = IDLE;
          end
    else
      if (!state_cnt)
        case (state)
          // INIT ENGINE
          INIT_NOP1:
            begin
            next = INIT_PRE1;
            command_nxt = CMD_PALL;
            end
          INIT_PRE1:
            begin
            next = INIT_NOP1_1;
            end
          INIT_NOP1_1:
            begin
            next = INIT_REF1;
            command_nxt = CMD_REF;
            end
          INIT_REF1:
            begin
            next = INIT_NOP2;
            state_cnt_nxt = 4'd7;
            end
          INIT_NOP2:
            begin
            next = INIT_REF2;
            command_nxt = CMD_REF;
            end
          INIT_REF2:
            begin
            next = INIT_NOP3;
            state_cnt_nxt = 4'd7;
            end
          INIT_NOP3:
            begin
            next = INIT_LOAD;
            command_nxt = CMD_MRS;
            end
          INIT_LOAD:
            begin
            next = INIT_NOP4;
            state_cnt_nxt = 4'd1;
            end
          // INIT_NOP4: default - IDLE

          // REFRESH
          REF_PRE:
            begin
            next = REF_NOP1;
            end
          REF_NOP1:
            begin
            next = REF_REF;
            command_nxt = CMD_REF;
            end
          REF_REF:
            begin
            next = REF_NOP2;
            state_cnt_nxt = 4'd7;
            end
          // REF_NOP2: default - IDLE

          // WRITE
          WRIT_ACT:
            begin
            next = WRIT_NOP1;
            state_cnt_nxt = 4'd1;
            end
          WRIT_NOP1:
            begin
            next = WRIT_CAS;
            command_nxt = CMD_WRIT;
            end
          WRIT_CAS:
            begin
            next = WRIT_NOP2;
            state_cnt_nxt = 4'd1;
            end
          // WRIT_NOP2: default - IDLE

          // READ
          READ_ACT:
            begin
            next = READ_NOP1;
            state_cnt_nxt = 4'd1;
            end
          READ_NOP1:
            begin
            next = READ_CAS;
            command_nxt = CMD_READ;
            end
          READ_CAS:
            begin
            next = READ_NOP2;
            state_cnt_nxt = 4'd1;
            end
          READ_NOP2:
            begin
            next = READ_READ;
            end
          // READ_READ: default - IDLE

          default:
            begin
            next = IDLE;
            end
          endcase
      else
        begin
        // Counter Not Reached - HOLD
        next = state;
        command_nxt = command;
        end
end
`ifdef FORMAL
    logic [3:0] cycle_count;
    
    initial begin 
        assume(~rst_n)
        cycle_count <= 0;
    end

    always @(posedge clk) begin
        if (cycle_count < 10)
            cycle_count <= cycle_count + 1;
    end

    assume property ( @(posedge clk) cycle_count < 5 |-> ~rst_n );
    assume property ( @(posedge clk) cycle_count > 4 |-> rst_n );

    always @(posedge clk) begin
        if(rst_n) begin
          precharge: cover (~cs_n & ~ras_n & cas_n & ~we_n);
          auto_refresh: cover (~cs_n & ~ras_n & ~cas_n & we_n);
          command_inhibit: cover (~cs_n & ras_n & cas_n & we_n);
          load_mode_register: cover (~cs_n & ~ras_n & ~cas_n & ~we_n);
          activate: cover (~cs_n & ~ras_n & cas_n & we_n);
          read: cover (~cs_n & ras_n & ~cas_n & we_n);
          write: cover (~cs_n & ras_n & ~cas_n & ~we_n);
        end
    end
`endif
endmodule

------
I also have a testbench for the DUT. Here's the Python code of the testbench:
------
TESTBENCH CODE
# scale_factor_queue_pop should be high?

import sys
import os

import random
import math

import functools
import zmq
import pickle
from contextlib import closing

import cocotb
from cocotb.clock import Clock
from cocotb.triggers import Timer, ClockCycles, ReadWrite, ReadOnly, Event, RisingEdge

directory = os.path.dirname(os.path.abspath(""__file__""))
sys.path.insert(0, os.path.dirname(directory))

from shared_helpers.cocotb_helpers import *
from sdram_controller.shared_types import *

class CoverageMonitor:

    def __init__(self):
        self.coverage_database = CoverageDatabase()
        self.coverage_database.misc_bins= {
            ""precharge"": 0,
            ""auto_refresh"": 0,
            ""command_inhibit"": 0,
            ""load_mode_register"":0,
            ""activate"": 0,
            ""read"": 0,
            ""write"": 0
        }

        self.coverage_sampled_event = Event()

# Produces the stimulus for the testbench based on observed coverage
class SimulationController:
    def __init__(self, dut, coverage_monitor, zmq_addr):
        self.dut = dut
        self.coverage_monitor = coverage_monitor
        self.end_simulation_event = Event()
        self.zmq_context = zmq.Context()
        self.zmq_addr = zmq_addr

    # Handles driving a new_value when one is provided by `determine_next_value`
    async def controller_loop(self):
        await cocotb.start(async_check_hits(self))
        with self.zmq_context.socket(zmq.REP) as socket:
            socket.bind(self.zmq_addr)

            while True:
                stimulus_msg = socket.recv()
                stimulus_obj = pickle.loads(stimulus_msg)
                print(stimulus_obj)

                dut_state = self.sample_dut_state()
                wr_enable = stimulus_obj.value[0]
                rd_enable = stimulus_obj.value[1]
                reset = stimulus_obj.value[2]

                while (self.dut.state_cnt.value != 0):
                    await ClockCycles(self.dut.clk, 1)

                if(reset):
                    reset_cycles = 3
                    self.dut.rst_n.value = 0
                    print(""RESET"")
                else:
                    reset_cycles = -1
                    self.dut.rst_n.value = 1

                self.dut.wr_enable.value = wr_enable
                self.dut.rd_enable.value = rd_enable

                print(self.dut.state.value)
                await ClockCycles(self.dut.clk, 1)
                while(self.dut.busy.value or reset_cycles > 0):
                    await ClockCycles(self.dut.clk, 1)
                    reset_cycles -= 1
                self.dut.rst_n.value = 1

                socket.send_pyobj((dut_state, self.coverage_monitor.coverage_database))

                if stimulus_obj.finish:
                    self.end_simulation_event.set()
                    break
    
    def check_hits(self):
        cs = self.dut.cs_n.value
        ras = self.dut.ras_n.value
        cas = self.dut.cas_n.value
        we = self.dut.we_n.value

        if(not cs and not ras and cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""precharge""] += 1
        if(not cs and not ras and not cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""auto_refresh""] += 1
        if(not cs and ras and cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""command_inhibit""] += 1
        if(not cs and not ras and not cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""load_mode_register""] += 1
        if(not cs and not ras and cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""activate""] += 1
        if(not cs and ras and not cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""read""] += 1
        if(not cs and ras and not cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""write""] += 1


    def sample_dut_state(self):
        return DUTState(
        )
    
    def close(self):
        self.zmq_context.term()

    def run_controller(self):
        cocotb.start_soon(self.controller_loop())

async def async_check_hits(simulation_controller):
    while(not simulation_controller.end_simulation_event.is_set()):
        await RisingEdge(simulation_controller.dut.clk)
        simulation_controller.check_hits()

@cocotb.test()
async def basic_test(dut):
    from global_shared_types import GlobalCoverageDatabase

    server_port = ""5050""
    # server_port = input(""Please enter server's port (e.g. 5050, 5555): "")

    trial_cnt = 0

    while True:
        trial_cnt += 1

        coverage_monitor = CoverageMonitor()
        cocotb.start_soon(Clock(dut.clk, 100, units=""ns"").start())

        await do_reset(dut.rst_n, dut.clk, 3)

        with closing(
            SimulationController(dut, coverage_monitor, f""tcp://*:{server_port}"")
        ) as simulation_controller:
            simulation_controller.run_controller()

            # Wait for end of simulation to be signalled. Give the design a few more
            # clocks to run before outputting final coverage values
            await simulation_controller.end_simulation_event.wait()
            await Timer(5, units=""ns"")

            print(f""***** FINAL COVERAGE of trial #{trial_cnt} *****"")
            print(
                GlobalCoverageDatabase(
                    coverage_monitor.coverage_database
                ).get_coverage_rate()
            )
        break
------
Now, we want to test the DUT with a list of commands as its input. We want the input to cover the bins (i.e. test cases) that we care about. Here's the description of the bins that we care about:
------
BINS DESCRIPTION
- You provide a list of lists, in the format: [[int, int, int], [int, int, int], ...]
- The DUT is an SDRAM controller (without burst support)
- The two integers in each list correspond to two input signal to the SDRAM controller:
    - First integer: write enable.
    - Second integer: read enable.
    - Third integer: reset. It is not advised to reset the design regularly.
- At least one clock cycle will pass between writing the inner lists on the inputs.
- Other inputs, such as address and data are not important, you will not provide these.
- The coverage bins are the possible commands the SDRAM controller can generate for the SDRAM. You need to cover each of the following bins with your commands:
---
    - precharge: deactivate (close) the current row of all banks
    - auto_refresh: refresh one row of each bank, using an internal counter. All banks must be precharged.
    - command_inhibit: command inhibit (no operation)
    - load_mode_register: configure the DRAM chip
    - activate: open a row for read and write commands
    - read: read data from the currently active row
    - write: write data to the currently active row
---
------

----------
Following the bins description, and refer to the programs, generate a list of integer pairs which covers the described bins as much as you can.
""",4951,"""[[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]""",72,none,5,"{'precharge': 157, 'auto_refresh': 48, 'command_inhibit': 3206, 'load_mode_register': 1, 'activate': 1}"
23,4,2,5142,"""The values you provided failed to cover all the bins.
You will see the result coverage of your previous response(s), and then generate another list of integer pairs to cover the unreached bins (i.e. test cases)
Here are some of the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5124,"""[[0, 0, 0], [0, 0, 0]]""",18,none,5,"{'precharge': 157, 'auto_refresh': 48, 'command_inhibit': 3214, 'load_mode_register': 2, 'activate': 1}"
24,4,3,5297,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
read data from the currently active row.
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5261,"""[[0, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 0]]""",36,none,6,"{'precharge': 157, 'auto_refresh': 48, 'command_inhibit': 3224, 'load_mode_register': 2, 'activate': 2, 'read': 1}"
25,4,4,5435,"""The values you provided failed to cover all the bins.
You will see the result coverage of your previous response(s), and then generate another list of integer pairs to cover the unreached bins (i.e. test cases)
Here are some of the unreached bins:
------
UNREACHED BINS
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5390,"""[[0, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 0], [0, 0, 1]]""",45,none,6,"{'precharge': 157, 'auto_refresh': 48, 'command_inhibit': 3237, 'load_mode_register': 2, 'activate': 3, 'read': 2}"
26,4,5,5600,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5546,"""[[0, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 0], [0, 0, 1], [1, 0, 0]]""",54,none,6,"{'precharge': 159, 'auto_refresh': 50, 'command_inhibit': 3281, 'load_mode_register': 2, 'activate': 3, 'read': 2}"
27,4,6,5885,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5822,"""[[0, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 0], [0, 0, 1], [1, 0, 0], [0, 1, 1]]""",63,none,6,"{'precharge': 160, 'auto_refresh': 52, 'command_inhibit': 3314, 'load_mode_register': 2, 'activate': 3, 'read': 2}"
28,4,7,5849,"""The new values you just provided didn't cover any new bins. You need to try to cover as much of the described bins as you can.
You will see the result coverage of your previous response(s), and then generate another list of commands to cover the unreached bins (i.e. test cases)
Here are some of  the unreached bins:
------
UNREACHED BINS
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5768,"""[[0, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 0], [0, 0, 1], [1, 0, 0], [0, 1, 1], [1, 1, 0], [1, 1, 1]]""",81,reset,6,"{'precharge': 163, 'auto_refresh': 54, 'command_inhibit': 3382, 'load_mode_register': 2, 'activate': 3, 'read': 2}"
29,5,1,5551,"""You will receive code of a DUT and a testbench for it, as well as a description of bins (i.e. test cases). 
----------
I have a device under test (DUT). Here's the SystemVerilog code of the DUT:
------
DUT CODE
/**
 * simple controller for ISSI IS42S16160G-7 SDRAM found in De0 Nano
 *  16Mbit x 16 data bit bus (32 megabytes)
 *  Default options
 *    133Mhz
 *    CAS 3
 *
 *  Very simple host interface
 *     * No burst support
 *     * haddr - address for reading and wriging 16 bits of data
 *     * data_input - data for writing, latched in when wr_enable is highz0
 *     * data_output - data for reading, comes available sometime
 *       *few clocks* after rd_enable and address is presented on bus
 *     * rst_n - start init ram process
 *     * rd_enable - read enable, on clk posedge haddr will be latched in,
 *       after *few clocks* data will be available on the data_output port
 *     * wr_enable - write enable, on clk posedge haddr and data_input will
 *       be latched in, after *few clocks* data will be written to sdram
 *
 * Theory
 *  This simple host interface has a busy signal to tell you when you are
 *  not able to issue commands.
 */

module sdram_controller (
    /* HOST INTERFACE */
    wr_addr,
    wr_data,
    wr_enable,

    rd_addr,
    rd_data,
    rd_ready,
    rd_enable,

    busy, rst_n, clk,

    /* SDRAM SIDE */
    addr, bank_addr, data, clock_enable, cs_n, ras_n, cas_n, we_n,
    data_mask_low, data_mask_high
);

/* Internal Parameters */
parameter ROW_WIDTH = 13;
parameter COL_WIDTH = 9;
parameter BANK_WIDTH = 2;

parameter SDRADDR_WIDTH = ROW_WIDTH > COL_WIDTH ? ROW_WIDTH : COL_WIDTH;
parameter HADDR_WIDTH = BANK_WIDTH + ROW_WIDTH + COL_WIDTH;

parameter CLK_FREQUENCY = 133;  // Mhz
parameter REFRESH_TIME =  32;   // ms     (how often we need to refresh)
parameter REFRESH_COUNT = 8192; // cycles (how many refreshes required per refresh time)

// clk / refresh =  clk / sec
//                , sec / refbatch
//                , ref / refbatch
localparam CYCLES_BETWEEN_REFRESH = ( CLK_FREQUENCY
                                      * 1_000
                                      * REFRESH_TIME
                                    ) / REFRESH_COUNT;

// STATES - State
localparam IDLE      = 5'b00000;

localparam INIT_NOP1 = 5'b01000,
           INIT_PRE1 = 5'b01001,
           INIT_NOP1_1=5'b00101,
           INIT_REF1 = 5'b01010,
           INIT_NOP2 = 5'b01011,
           INIT_REF2 = 5'b01100,
           INIT_NOP3 = 5'b01101,
           INIT_LOAD = 5'b01110,
           INIT_NOP4 = 5'b01111;

localparam REF_PRE  =  5'b00001,
           REF_NOP1 =  5'b00010,
           REF_REF  =  5'b00011,
           REF_NOP2 =  5'b00100;

localparam READ_ACT  = 5'b10000,
           READ_NOP1 = 5'b10001,
           READ_CAS  = 5'b10010,
           READ_NOP2 = 5'b10011,
           READ_READ = 5'b10100;

localparam WRIT_ACT  = 5'b11000,
           WRIT_NOP1 = 5'b11001,
           WRIT_CAS  = 5'b11010,
           WRIT_NOP2 = 5'b11011;

// Commands              CCRCWBBA
//                       ESSSE100
localparam CMD_PALL = 8'b10010001,
           CMD_REF  = 8'b10001000,
           CMD_NOP  = 8'b10111000,
           CMD_MRS  = 8'b1000000x,
           CMD_BACT = 8'b10011xxx,
           CMD_READ = 8'b10101xx1,
           CMD_WRIT = 8'b10100xx1;

/* Interface Definition */
/* HOST INTERFACE */
input  [HADDR_WIDTH-1:0]   wr_addr;
input  [15:0]              wr_data;
input                      wr_enable;

input  [HADDR_WIDTH-1:0]   rd_addr;
output [15:0]              rd_data;
input                      rd_enable;
output                     rd_ready;

output                     busy;
input                      rst_n;
input                      clk;

/* SDRAM SIDE */
output [SDRADDR_WIDTH-1:0] addr;
output [BANK_WIDTH-1:0]    bank_addr;
inout  [15:0]              data;
output                     clock_enable;
output                     cs_n;
output                     ras_n;
output                     cas_n;
output                     we_n;
output                     data_mask_low;
output                     data_mask_high;

/* I/O Registers */

reg  [HADDR_WIDTH-1:0]   haddr_r;
reg  [15:0]              wr_data_r;
reg  [15:0]              rd_data_r;
reg                      busy;
reg                      data_mask_low_r;
reg                      data_mask_high_r;
reg [SDRADDR_WIDTH-1:0]  addr_r;
reg [BANK_WIDTH-1:0]     bank_addr_r;
reg                      rd_ready_r;

wire [15:0]              data_output;
wire                     data_mask_low, data_mask_high;

assign data_mask_high = data_mask_high_r;
assign data_mask_low  = data_mask_low_r;
assign rd_data        = rd_data_r;

/* Internal Wiring */
reg [3:0] state_cnt;
reg [9:0] refresh_cnt;

reg [7:0] command;
reg [4:0] state;

// TODO output addr[6:4] when programming mode register

reg [7:0] command_nxt;
reg [3:0] state_cnt_nxt;
reg [4:0] next;

assign {clock_enable, cs_n, ras_n, cas_n, we_n} = command[7:3];
// state[4] will be set if mode is read/write
assign bank_addr      = (state[4]) ? bank_addr_r : command[2:1];
assign addr           = (state[4] | state == INIT_LOAD) ? addr_r : { {SDRADDR_WIDTH-11{1'b0}}, command[0], 10'd0 };

assign data = (state == WRIT_CAS) ? wr_data_r : 16'bz;
assign rd_ready = rd_ready_r;

// HOST INTERFACE
// all registered on posedge
always @ (posedge clk)
  if (~rst_n)
    begin
    state <= INIT_NOP1;
    command <= CMD_NOP;
    state_cnt <= 4'hf;

    haddr_r <= {HADDR_WIDTH{1'b0}};
    wr_data_r <= 16'b0;
    rd_data_r <= 16'b0;
    busy <= 1'b0;
    end
  else
    begin

    state <= next;
    command <= command_nxt;

    if (!state_cnt)
      state_cnt <= state_cnt_nxt;
    else
      state_cnt <= state_cnt - 1'b1;

    if (wr_enable)
      wr_data_r <= wr_data;

    if (state == READ_READ)
      begin
      rd_data_r <= data;
      rd_ready_r <= 1'b1;
      end
    else
      rd_ready_r <= 1'b0;

    busy <= state[4];

    if (rd_enable)
      haddr_r <= rd_addr;
    else if (wr_enable)
      haddr_r <= wr_addr;

    end

// Handle refresh counter
always @ (posedge clk)
 if (~rst_n)
   refresh_cnt <= 10'b0;
 else
   if (state == REF_NOP2)
     refresh_cnt <= 10'b0;
   else
     refresh_cnt <= refresh_cnt + 1'b1;


/* Handle logic for sending addresses to SDRAM based on current state*/
always @*
begin
    if (state[4])
      {data_mask_low_r, data_mask_high_r} = 2'b00;
    else
      {data_mask_low_r, data_mask_high_r} = 2'b11;

   bank_addr_r = 2'b00;
   addr_r = {SDRADDR_WIDTH{1'b0}};

   if (state == READ_ACT | state == WRIT_ACT)
     begin
     bank_addr_r = haddr_r[HADDR_WIDTH-1:HADDR_WIDTH-(BANK_WIDTH)];
     addr_r = haddr_r[HADDR_WIDTH-(BANK_WIDTH+1):HADDR_WIDTH-(BANK_WIDTH+ROW_WIDTH)];
     end
   else if (state == READ_CAS | state == WRIT_CAS)
     begin
     // Send Column Address
     // Set bank to bank to precharge
     bank_addr_r = haddr_r[HADDR_WIDTH-1:HADDR_WIDTH-(BANK_WIDTH)];

     // Examples for math
     //               BANK  ROW    COL
     // HADDR_WIDTH   2 +   13 +   9   = 24
     // SDRADDR_WIDTH 13

     // Set CAS address to:
     //   0s,
     //   1 (A10 is always for auto precharge),
     //   0s,
     //   column address
     addr_r = {
               {SDRADDR_WIDTH-(11){1'b0}},
               1'b1,                       /* A10 */
               {10-COL_WIDTH{1'b0}},
               haddr_r[COL_WIDTH-1:0]
              };
     end
   else if (state == INIT_LOAD)
     begin
     // Program mode register during load cycle
     //                                       B  C  SB
     //                                       R  A  EUR
     //                                       S  S-3Q ST
     //                                       T  654L210
     addr_r = {{SDRADDR_WIDTH-10{1'b0}}, 10'b1000110000};
     end
end

// Next state logic
always @*
begin
   state_cnt_nxt = 4'd0;
   command_nxt = CMD_NOP;
   if (state == IDLE)
        // Monitor for refresh or hold
        if (refresh_cnt >= CYCLES_BETWEEN_REFRESH)
          begin
          next = REF_PRE;
          command_nxt = CMD_PALL;
          end
        else if (rd_enable)
          begin
          next = READ_ACT;
          command_nxt = CMD_BACT;
          end
        else if (wr_enable)
          begin
          next = WRIT_ACT;
          command_nxt = CMD_BACT;
          end
        else
          begin
          // HOLD
          next = IDLE;
          end
    else
      if (!state_cnt)
        case (state)
          // INIT ENGINE
          INIT_NOP1:
            begin
            next = INIT_PRE1;
            command_nxt = CMD_PALL;
            end
          INIT_PRE1:
            begin
            next = INIT_NOP1_1;
            end
          INIT_NOP1_1:
            begin
            next = INIT_REF1;
            command_nxt = CMD_REF;
            end
          INIT_REF1:
            begin
            next = INIT_NOP2;
            state_cnt_nxt = 4'd7;
            end
          INIT_NOP2:
            begin
            next = INIT_REF2;
            command_nxt = CMD_REF;
            end
          INIT_REF2:
            begin
            next = INIT_NOP3;
            state_cnt_nxt = 4'd7;
            end
          INIT_NOP3:
            begin
            next = INIT_LOAD;
            command_nxt = CMD_MRS;
            end
          INIT_LOAD:
            begin
            next = INIT_NOP4;
            state_cnt_nxt = 4'd1;
            end
          // INIT_NOP4: default - IDLE

          // REFRESH
          REF_PRE:
            begin
            next = REF_NOP1;
            end
          REF_NOP1:
            begin
            next = REF_REF;
            command_nxt = CMD_REF;
            end
          REF_REF:
            begin
            next = REF_NOP2;
            state_cnt_nxt = 4'd7;
            end
          // REF_NOP2: default - IDLE

          // WRITE
          WRIT_ACT:
            begin
            next = WRIT_NOP1;
            state_cnt_nxt = 4'd1;
            end
          WRIT_NOP1:
            begin
            next = WRIT_CAS;
            command_nxt = CMD_WRIT;
            end
          WRIT_CAS:
            begin
            next = WRIT_NOP2;
            state_cnt_nxt = 4'd1;
            end
          // WRIT_NOP2: default - IDLE

          // READ
          READ_ACT:
            begin
            next = READ_NOP1;
            state_cnt_nxt = 4'd1;
            end
          READ_NOP1:
            begin
            next = READ_CAS;
            command_nxt = CMD_READ;
            end
          READ_CAS:
            begin
            next = READ_NOP2;
            state_cnt_nxt = 4'd1;
            end
          READ_NOP2:
            begin
            next = READ_READ;
            end
          // READ_READ: default - IDLE

          default:
            begin
            next = IDLE;
            end
          endcase
      else
        begin
        // Counter Not Reached - HOLD
        next = state;
        command_nxt = command;
        end
end
`ifdef FORMAL
    logic [3:0] cycle_count;
    
    initial begin 
        assume(~rst_n)
        cycle_count <= 0;
    end

    always @(posedge clk) begin
        if (cycle_count < 10)
            cycle_count <= cycle_count + 1;
    end

    assume property ( @(posedge clk) cycle_count < 5 |-> ~rst_n );
    assume property ( @(posedge clk) cycle_count > 4 |-> rst_n );

    always @(posedge clk) begin
        if(rst_n) begin
          precharge: cover (~cs_n & ~ras_n & cas_n & ~we_n);
          auto_refresh: cover (~cs_n & ~ras_n & ~cas_n & we_n);
          command_inhibit: cover (~cs_n & ras_n & cas_n & we_n);
          load_mode_register: cover (~cs_n & ~ras_n & ~cas_n & ~we_n);
          activate: cover (~cs_n & ~ras_n & cas_n & we_n);
          read: cover (~cs_n & ras_n & ~cas_n & we_n);
          write: cover (~cs_n & ras_n & ~cas_n & ~we_n);
        end
    end
`endif
endmodule

------
I also have a testbench for the DUT. Here's the Python code of the testbench:
------
TESTBENCH CODE
# scale_factor_queue_pop should be high?

import sys
import os

import random
import math

import functools
import zmq
import pickle
from contextlib import closing

import cocotb
from cocotb.clock import Clock
from cocotb.triggers import Timer, ClockCycles, ReadWrite, ReadOnly, Event, RisingEdge

directory = os.path.dirname(os.path.abspath(""__file__""))
sys.path.insert(0, os.path.dirname(directory))

from shared_helpers.cocotb_helpers import *
from sdram_controller.shared_types import *

class CoverageMonitor:

    def __init__(self):
        self.coverage_database = CoverageDatabase()
        self.coverage_database.misc_bins= {
            ""precharge"": 0,
            ""auto_refresh"": 0,
            ""command_inhibit"": 0,
            ""load_mode_register"":0,
            ""activate"": 0,
            ""read"": 0,
            ""write"": 0
        }

        self.coverage_sampled_event = Event()

# Produces the stimulus for the testbench based on observed coverage
class SimulationController:
    def __init__(self, dut, coverage_monitor, zmq_addr):
        self.dut = dut
        self.coverage_monitor = coverage_monitor
        self.end_simulation_event = Event()
        self.zmq_context = zmq.Context()
        self.zmq_addr = zmq_addr

    # Handles driving a new_value when one is provided by `determine_next_value`
    async def controller_loop(self):
        await cocotb.start(async_check_hits(self))
        with self.zmq_context.socket(zmq.REP) as socket:
            socket.bind(self.zmq_addr)

            while True:
                stimulus_msg = socket.recv()
                stimulus_obj = pickle.loads(stimulus_msg)
                print(stimulus_obj)

                dut_state = self.sample_dut_state()
                wr_enable = stimulus_obj.value[0]
                rd_enable = stimulus_obj.value[1]
                reset = stimulus_obj.value[2]

                while (self.dut.state_cnt.value != 0):
                    await ClockCycles(self.dut.clk, 1)

                if(reset):
                    reset_cycles = 3
                    self.dut.rst_n.value = 0
                    print(""RESET"")
                else:
                    reset_cycles = -1
                    self.dut.rst_n.value = 1

                self.dut.wr_enable.value = wr_enable
                self.dut.rd_enable.value = rd_enable

                print(self.dut.state.value)
                await ClockCycles(self.dut.clk, 1)
                while(self.dut.busy.value or reset_cycles > 0):
                    await ClockCycles(self.dut.clk, 1)
                    reset_cycles -= 1
                self.dut.rst_n.value = 1

                socket.send_pyobj((dut_state, self.coverage_monitor.coverage_database))

                if stimulus_obj.finish:
                    self.end_simulation_event.set()
                    break
    
    def check_hits(self):
        cs = self.dut.cs_n.value
        ras = self.dut.ras_n.value
        cas = self.dut.cas_n.value
        we = self.dut.we_n.value

        if(not cs and not ras and cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""precharge""] += 1
        if(not cs and not ras and not cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""auto_refresh""] += 1
        if(not cs and ras and cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""command_inhibit""] += 1
        if(not cs and not ras and not cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""load_mode_register""] += 1
        if(not cs and not ras and cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""activate""] += 1
        if(not cs and ras and not cas and we):
            self.coverage_monitor.coverage_database.misc_bins[""read""] += 1
        if(not cs and ras and not cas and not we):
            self.coverage_monitor.coverage_database.misc_bins[""write""] += 1


    def sample_dut_state(self):
        return DUTState(
        )
    
    def close(self):
        self.zmq_context.term()

    def run_controller(self):
        cocotb.start_soon(self.controller_loop())

async def async_check_hits(simulation_controller):
    while(not simulation_controller.end_simulation_event.is_set()):
        await RisingEdge(simulation_controller.dut.clk)
        simulation_controller.check_hits()

@cocotb.test()
async def basic_test(dut):
    from global_shared_types import GlobalCoverageDatabase

    server_port = ""5050""
    # server_port = input(""Please enter server's port (e.g. 5050, 5555): "")

    trial_cnt = 0

    while True:
        trial_cnt += 1

        coverage_monitor = CoverageMonitor()
        cocotb.start_soon(Clock(dut.clk, 100, units=""ns"").start())

        await do_reset(dut.rst_n, dut.clk, 3)

        with closing(
            SimulationController(dut, coverage_monitor, f""tcp://*:{server_port}"")
        ) as simulation_controller:
            simulation_controller.run_controller()

            # Wait for end of simulation to be signalled. Give the design a few more
            # clocks to run before outputting final coverage values
            await simulation_controller.end_simulation_event.wait()
            await Timer(5, units=""ns"")

            print(f""***** FINAL COVERAGE of trial #{trial_cnt} *****"")
            print(
                GlobalCoverageDatabase(
                    coverage_monitor.coverage_database
                ).get_coverage_rate()
            )
        break
------
Now, we want to test the DUT with a list of commands as its input. We want the input to cover the bins (i.e. test cases) that we care about. Here's the description of the bins that we care about:
------
BINS DESCRIPTION
- You provide a list of lists, in the format: [[int, int, int], [int, int, int], ...]
- The DUT is an SDRAM controller (without burst support)
- The two integers in each list correspond to two input signal to the SDRAM controller:
    - First integer: write enable.
    - Second integer: read enable.
    - Third integer: reset. It is not advised to reset the design regularly.
- At least one clock cycle will pass between writing the inner lists on the inputs.
- Other inputs, such as address and data are not important, you will not provide these.
- The coverage bins are the possible commands the SDRAM controller can generate for the SDRAM. You need to cover each of the following bins with your commands:
---
    - precharge: deactivate (close) the current row of all banks
    - auto_refresh: refresh one row of each bank, using an internal counter. All banks must be precharged.
    - command_inhibit: command inhibit (no operation)
    - load_mode_register: configure the DRAM chip
    - activate: open a row for read and write commands
    - read: read data from the currently active row
    - write: write data to the currently active row
---
------

----------
Following the bins description, and refer to the programs, generate a list of integer pairs which covers the described bins as much as you can.
""",4951,"""[[1, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0,""",600,none,6,"{'precharge': 166, 'auto_refresh': 59, 'command_inhibit': 3516, 'load_mode_register': 3, 'activate': 3, 'read': 2}"
30,5,2,6244,"""The values you provided failed to cover all the bins.
You will see the result coverage of your previous response(s), and then generate another list of integer pairs to cover the unreached bins (i.e. test cases)
Here are some of the unreached bins:
------
UNREACHED BINS
write data to the currently active row.
------
Please regenerate commands for the still unreached bins according to the BINS DESCRIPTION.""",5644,"""[[1, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0,""",600,done,7,"{'precharge': 166, 'auto_refresh': 59, 'command_inhibit': 3523, 'load_mode_register': 3, 'activate': 4, 'read': 2, 'write': 1}"
